//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.4952
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.42.
// 
namespace WebsitePanel.EnterpriseServer {
    using System.Xml.Serialization;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Diagnostics;

    using WebsitePanel.Providers;
    using WebsitePanel.Providers.Common;
    using WebsitePanel.Providers.ExchangeHostedEdition;
    using WebsitePanel.Providers.ResultObjects;
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="esExchangeHostedEditionSoap", Namespace="http://smbsaas/websitepanel/enterpriseserver")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceProviderItem))]
    public partial class esExchangeHostedEdition : Microsoft.Web.Services3.WebServicesClientProtocol {
        
        private System.Threading.SendOrPostCallback GetOrganizationsOperationCompleted;
        
        private System.Threading.SendOrPostCallback CreateExchangeOrganizationOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExchangeOrganizationDetailsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExchangeOrganizationDomainsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetExchangeOrganizationSummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback SendExchangeOrganizationSummaryOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddExchangeOrganizationDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteExchangeOrganizationDomainOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateExchangeOrganizationQuotasOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateExchangeOrganizationCatchAllAddressOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateExchangeOrganizationServicePlanOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteExchangeOrganizationOperationCompleted;
        
        /// <remarks/>
        public esExchangeHostedEdition() {
            this.Url = "http://localhost:9002/esExchangeHostedEdition.asmx";
        }
        
        /// <remarks/>
        public event GetOrganizationsCompletedEventHandler GetOrganizationsCompleted;
        
        /// <remarks/>
        public event CreateExchangeOrganizationCompletedEventHandler CreateExchangeOrganizationCompleted;
        
        /// <remarks/>
        public event GetExchangeOrganizationDetailsCompletedEventHandler GetExchangeOrganizationDetailsCompleted;
        
        /// <remarks/>
        public event GetExchangeOrganizationDomainsCompletedEventHandler GetExchangeOrganizationDomainsCompleted;
        
        /// <remarks/>
        public event GetExchangeOrganizationSummaryCompletedEventHandler GetExchangeOrganizationSummaryCompleted;
        
        /// <remarks/>
        public event SendExchangeOrganizationSummaryCompletedEventHandler SendExchangeOrganizationSummaryCompleted;
        
        /// <remarks/>
        public event AddExchangeOrganizationDomainCompletedEventHandler AddExchangeOrganizationDomainCompleted;
        
        /// <remarks/>
        public event DeleteExchangeOrganizationDomainCompletedEventHandler DeleteExchangeOrganizationDomainCompleted;
        
        /// <remarks/>
        public event UpdateExchangeOrganizationQuotasCompletedEventHandler UpdateExchangeOrganizationQuotasCompleted;
        
        /// <remarks/>
        public event UpdateExchangeOrganizationCatchAllAddressCompletedEventHandler UpdateExchangeOrganizationCatchAllAddressCompleted;
        
        /// <remarks/>
        public event UpdateExchangeOrganizationServicePlanCompletedEventHandler UpdateExchangeOrganizationServicePlanCompleted;
        
        /// <remarks/>
        public event DeleteExchangeOrganizationCompletedEventHandler DeleteExchangeOrganizationCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetOrganizations", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExchangeOrganization[] GetOrganizations(int packageId) {
            object[] results = this.Invoke("GetOrganizations", new object[] {
                        packageId});
            return ((ExchangeOrganization[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetOrganizations(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetOrganizations", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExchangeOrganization[] EndGetOrganizations(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExchangeOrganization[])(results[0]));
        }
        
        /// <remarks/>
        public void GetOrganizationsAsync(int packageId) {
            this.GetOrganizationsAsync(packageId, null);
        }
        
        /// <remarks/>
        public void GetOrganizationsAsync(int packageId, object userState) {
            if ((this.GetOrganizationsOperationCompleted == null)) {
                this.GetOrganizationsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetOrganizationsOperationCompleted);
            }
            this.InvokeAsync("GetOrganizations", new object[] {
                        packageId}, this.GetOrganizationsOperationCompleted, userState);
        }
        
        private void OnGetOrganizationsOperationCompleted(object arg) {
            if ((this.GetOrganizationsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetOrganizationsCompleted(this, new GetOrganizationsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/CreateExchangeOrganization", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public IntResult CreateExchangeOrganization(int packageId, string organizationId, string domain, string adminName, string adminEmail, string adminPassword) {
            object[] results = this.Invoke("CreateExchangeOrganization", new object[] {
                        packageId,
                        organizationId,
                        domain,
                        adminName,
                        adminEmail,
                        adminPassword});
            return ((IntResult)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginCreateExchangeOrganization(int packageId, string organizationId, string domain, string adminName, string adminEmail, string adminPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("CreateExchangeOrganization", new object[] {
                        packageId,
                        organizationId,
                        domain,
                        adminName,
                        adminEmail,
                        adminPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public IntResult EndCreateExchangeOrganization(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((IntResult)(results[0]));
        }
        
        /// <remarks/>
        public void CreateExchangeOrganizationAsync(int packageId, string organizationId, string domain, string adminName, string adminEmail, string adminPassword) {
            this.CreateExchangeOrganizationAsync(packageId, organizationId, domain, adminName, adminEmail, adminPassword, null);
        }
        
        /// <remarks/>
        public void CreateExchangeOrganizationAsync(int packageId, string organizationId, string domain, string adminName, string adminEmail, string adminPassword, object userState) {
            if ((this.CreateExchangeOrganizationOperationCompleted == null)) {
                this.CreateExchangeOrganizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCreateExchangeOrganizationOperationCompleted);
            }
            this.InvokeAsync("CreateExchangeOrganization", new object[] {
                        packageId,
                        organizationId,
                        domain,
                        adminName,
                        adminEmail,
                        adminPassword}, this.CreateExchangeOrganizationOperationCompleted, userState);
        }
        
        private void OnCreateExchangeOrganizationOperationCompleted(object arg) {
            if ((this.CreateExchangeOrganizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CreateExchangeOrganizationCompleted(this, new CreateExchangeOrganizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetExchangeOrganizationDetails", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExchangeOrganization GetExchangeOrganizationDetails(int itemId) {
            object[] results = this.Invoke("GetExchangeOrganizationDetails", new object[] {
                        itemId});
            return ((ExchangeOrganization)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetExchangeOrganizationDetails(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetExchangeOrganizationDetails", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExchangeOrganization EndGetExchangeOrganizationDetails(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExchangeOrganization)(results[0]));
        }
        
        /// <remarks/>
        public void GetExchangeOrganizationDetailsAsync(int itemId) {
            this.GetExchangeOrganizationDetailsAsync(itemId, null);
        }
        
        /// <remarks/>
        public void GetExchangeOrganizationDetailsAsync(int itemId, object userState) {
            if ((this.GetExchangeOrganizationDetailsOperationCompleted == null)) {
                this.GetExchangeOrganizationDetailsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExchangeOrganizationDetailsOperationCompleted);
            }
            this.InvokeAsync("GetExchangeOrganizationDetails", new object[] {
                        itemId}, this.GetExchangeOrganizationDetailsOperationCompleted, userState);
        }
        
        private void OnGetExchangeOrganizationDetailsOperationCompleted(object arg) {
            if ((this.GetExchangeOrganizationDetailsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExchangeOrganizationDetailsCompleted(this, new GetExchangeOrganizationDetailsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetExchangeOrganizationDomains", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ExchangeOrganizationDomain[] GetExchangeOrganizationDomains(int itemId) {
            object[] results = this.Invoke("GetExchangeOrganizationDomains", new object[] {
                        itemId});
            return ((ExchangeOrganizationDomain[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetExchangeOrganizationDomains(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetExchangeOrganizationDomains", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ExchangeOrganizationDomain[] EndGetExchangeOrganizationDomains(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ExchangeOrganizationDomain[])(results[0]));
        }
        
        /// <remarks/>
        public void GetExchangeOrganizationDomainsAsync(int itemId) {
            this.GetExchangeOrganizationDomainsAsync(itemId, null);
        }
        
        /// <remarks/>
        public void GetExchangeOrganizationDomainsAsync(int itemId, object userState) {
            if ((this.GetExchangeOrganizationDomainsOperationCompleted == null)) {
                this.GetExchangeOrganizationDomainsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExchangeOrganizationDomainsOperationCompleted);
            }
            this.InvokeAsync("GetExchangeOrganizationDomains", new object[] {
                        itemId}, this.GetExchangeOrganizationDomainsOperationCompleted, userState);
        }
        
        private void OnGetExchangeOrganizationDomainsOperationCompleted(object arg) {
            if ((this.GetExchangeOrganizationDomainsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExchangeOrganizationDomainsCompleted(this, new GetExchangeOrganizationDomainsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetExchangeOrganizationSummary", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string GetExchangeOrganizationSummary(int itemId) {
            object[] results = this.Invoke("GetExchangeOrganizationSummary", new object[] {
                        itemId});
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetExchangeOrganizationSummary(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetExchangeOrganizationSummary", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string EndGetExchangeOrganizationSummary(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string)(results[0]));
        }
        
        /// <remarks/>
        public void GetExchangeOrganizationSummaryAsync(int itemId) {
            this.GetExchangeOrganizationSummaryAsync(itemId, null);
        }
        
        /// <remarks/>
        public void GetExchangeOrganizationSummaryAsync(int itemId, object userState) {
            if ((this.GetExchangeOrganizationSummaryOperationCompleted == null)) {
                this.GetExchangeOrganizationSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetExchangeOrganizationSummaryOperationCompleted);
            }
            this.InvokeAsync("GetExchangeOrganizationSummary", new object[] {
                        itemId}, this.GetExchangeOrganizationSummaryOperationCompleted, userState);
        }
        
        private void OnGetExchangeOrganizationSummaryOperationCompleted(object arg) {
            if ((this.GetExchangeOrganizationSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetExchangeOrganizationSummaryCompleted(this, new GetExchangeOrganizationSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/SendExchangeOrganizationSummary", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject SendExchangeOrganizationSummary(int itemId, string toEmail) {
            object[] results = this.Invoke("SendExchangeOrganizationSummary", new object[] {
                        itemId,
                        toEmail});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginSendExchangeOrganizationSummary(int itemId, string toEmail, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("SendExchangeOrganizationSummary", new object[] {
                        itemId,
                        toEmail}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndSendExchangeOrganizationSummary(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void SendExchangeOrganizationSummaryAsync(int itemId, string toEmail) {
            this.SendExchangeOrganizationSummaryAsync(itemId, toEmail, null);
        }
        
        /// <remarks/>
        public void SendExchangeOrganizationSummaryAsync(int itemId, string toEmail, object userState) {
            if ((this.SendExchangeOrganizationSummaryOperationCompleted == null)) {
                this.SendExchangeOrganizationSummaryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnSendExchangeOrganizationSummaryOperationCompleted);
            }
            this.InvokeAsync("SendExchangeOrganizationSummary", new object[] {
                        itemId,
                        toEmail}, this.SendExchangeOrganizationSummaryOperationCompleted, userState);
        }
        
        private void OnSendExchangeOrganizationSummaryOperationCompleted(object arg) {
            if ((this.SendExchangeOrganizationSummaryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.SendExchangeOrganizationSummaryCompleted(this, new SendExchangeOrganizationSummaryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/AddExchangeOrganizationDomain", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject AddExchangeOrganizationDomain(int itemId, string domain) {
            object[] results = this.Invoke("AddExchangeOrganizationDomain", new object[] {
                        itemId,
                        domain});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddExchangeOrganizationDomain(int itemId, string domain, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddExchangeOrganizationDomain", new object[] {
                        itemId,
                        domain}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndAddExchangeOrganizationDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void AddExchangeOrganizationDomainAsync(int itemId, string domain) {
            this.AddExchangeOrganizationDomainAsync(itemId, domain, null);
        }
        
        /// <remarks/>
        public void AddExchangeOrganizationDomainAsync(int itemId, string domain, object userState) {
            if ((this.AddExchangeOrganizationDomainOperationCompleted == null)) {
                this.AddExchangeOrganizationDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddExchangeOrganizationDomainOperationCompleted);
            }
            this.InvokeAsync("AddExchangeOrganizationDomain", new object[] {
                        itemId,
                        domain}, this.AddExchangeOrganizationDomainOperationCompleted, userState);
        }
        
        private void OnAddExchangeOrganizationDomainOperationCompleted(object arg) {
            if ((this.AddExchangeOrganizationDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddExchangeOrganizationDomainCompleted(this, new AddExchangeOrganizationDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/DeleteExchangeOrganizationDomain", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject DeleteExchangeOrganizationDomain(int itemId, string domain) {
            object[] results = this.Invoke("DeleteExchangeOrganizationDomain", new object[] {
                        itemId,
                        domain});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteExchangeOrganizationDomain(int itemId, string domain, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteExchangeOrganizationDomain", new object[] {
                        itemId,
                        domain}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndDeleteExchangeOrganizationDomain(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteExchangeOrganizationDomainAsync(int itemId, string domain) {
            this.DeleteExchangeOrganizationDomainAsync(itemId, domain, null);
        }
        
        /// <remarks/>
        public void DeleteExchangeOrganizationDomainAsync(int itemId, string domain, object userState) {
            if ((this.DeleteExchangeOrganizationDomainOperationCompleted == null)) {
                this.DeleteExchangeOrganizationDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteExchangeOrganizationDomainOperationCompleted);
            }
            this.InvokeAsync("DeleteExchangeOrganizationDomain", new object[] {
                        itemId,
                        domain}, this.DeleteExchangeOrganizationDomainOperationCompleted, userState);
        }
        
        private void OnDeleteExchangeOrganizationDomainOperationCompleted(object arg) {
            if ((this.DeleteExchangeOrganizationDomainCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteExchangeOrganizationDomainCompleted(this, new DeleteExchangeOrganizationDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/UpdateExchangeOrganizationQuotas", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject UpdateExchangeOrganizationQuotas(int itemId, int mailboxesNumber, int contactsNumber, int distributionListsNumber) {
            object[] results = this.Invoke("UpdateExchangeOrganizationQuotas", new object[] {
                        itemId,
                        mailboxesNumber,
                        contactsNumber,
                        distributionListsNumber});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateExchangeOrganizationQuotas(int itemId, int mailboxesNumber, int contactsNumber, int distributionListsNumber, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateExchangeOrganizationQuotas", new object[] {
                        itemId,
                        mailboxesNumber,
                        contactsNumber,
                        distributionListsNumber}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndUpdateExchangeOrganizationQuotas(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateExchangeOrganizationQuotasAsync(int itemId, int mailboxesNumber, int contactsNumber, int distributionListsNumber) {
            this.UpdateExchangeOrganizationQuotasAsync(itemId, mailboxesNumber, contactsNumber, distributionListsNumber, null);
        }
        
        /// <remarks/>
        public void UpdateExchangeOrganizationQuotasAsync(int itemId, int mailboxesNumber, int contactsNumber, int distributionListsNumber, object userState) {
            if ((this.UpdateExchangeOrganizationQuotasOperationCompleted == null)) {
                this.UpdateExchangeOrganizationQuotasOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateExchangeOrganizationQuotasOperationCompleted);
            }
            this.InvokeAsync("UpdateExchangeOrganizationQuotas", new object[] {
                        itemId,
                        mailboxesNumber,
                        contactsNumber,
                        distributionListsNumber}, this.UpdateExchangeOrganizationQuotasOperationCompleted, userState);
        }
        
        private void OnUpdateExchangeOrganizationQuotasOperationCompleted(object arg) {
            if ((this.UpdateExchangeOrganizationQuotasCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateExchangeOrganizationQuotasCompleted(this, new UpdateExchangeOrganizationQuotasCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/UpdateExchangeOrganizationCatchAllAd" +
            "dress", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject UpdateExchangeOrganizationCatchAllAddress(int itemId, string catchAllEmail) {
            object[] results = this.Invoke("UpdateExchangeOrganizationCatchAllAddress", new object[] {
                        itemId,
                        catchAllEmail});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateExchangeOrganizationCatchAllAddress(int itemId, string catchAllEmail, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateExchangeOrganizationCatchAllAddress", new object[] {
                        itemId,
                        catchAllEmail}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndUpdateExchangeOrganizationCatchAllAddress(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateExchangeOrganizationCatchAllAddressAsync(int itemId, string catchAllEmail) {
            this.UpdateExchangeOrganizationCatchAllAddressAsync(itemId, catchAllEmail, null);
        }
        
        /// <remarks/>
        public void UpdateExchangeOrganizationCatchAllAddressAsync(int itemId, string catchAllEmail, object userState) {
            if ((this.UpdateExchangeOrganizationCatchAllAddressOperationCompleted == null)) {
                this.UpdateExchangeOrganizationCatchAllAddressOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateExchangeOrganizationCatchAllAddressOperationCompleted);
            }
            this.InvokeAsync("UpdateExchangeOrganizationCatchAllAddress", new object[] {
                        itemId,
                        catchAllEmail}, this.UpdateExchangeOrganizationCatchAllAddressOperationCompleted, userState);
        }
        
        private void OnUpdateExchangeOrganizationCatchAllAddressOperationCompleted(object arg) {
            if ((this.UpdateExchangeOrganizationCatchAllAddressCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateExchangeOrganizationCatchAllAddressCompleted(this, new UpdateExchangeOrganizationCatchAllAddressCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/UpdateExchangeOrganizationServicePla" +
            "n", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject UpdateExchangeOrganizationServicePlan(int itemId, int newServiceId) {
            object[] results = this.Invoke("UpdateExchangeOrganizationServicePlan", new object[] {
                        itemId,
                        newServiceId});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateExchangeOrganizationServicePlan(int itemId, int newServiceId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateExchangeOrganizationServicePlan", new object[] {
                        itemId,
                        newServiceId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndUpdateExchangeOrganizationServicePlan(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateExchangeOrganizationServicePlanAsync(int itemId, int newServiceId) {
            this.UpdateExchangeOrganizationServicePlanAsync(itemId, newServiceId, null);
        }
        
        /// <remarks/>
        public void UpdateExchangeOrganizationServicePlanAsync(int itemId, int newServiceId, object userState) {
            if ((this.UpdateExchangeOrganizationServicePlanOperationCompleted == null)) {
                this.UpdateExchangeOrganizationServicePlanOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateExchangeOrganizationServicePlanOperationCompleted);
            }
            this.InvokeAsync("UpdateExchangeOrganizationServicePlan", new object[] {
                        itemId,
                        newServiceId}, this.UpdateExchangeOrganizationServicePlanOperationCompleted, userState);
        }
        
        private void OnUpdateExchangeOrganizationServicePlanOperationCompleted(object arg) {
            if ((this.UpdateExchangeOrganizationServicePlanCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateExchangeOrganizationServicePlanCompleted(this, new UpdateExchangeOrganizationServicePlanCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/DeleteExchangeOrganization", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject DeleteExchangeOrganization(int itemId) {
            object[] results = this.Invoke("DeleteExchangeOrganization", new object[] {
                        itemId});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteExchangeOrganization(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteExchangeOrganization", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndDeleteExchangeOrganization(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteExchangeOrganizationAsync(int itemId) {
            this.DeleteExchangeOrganizationAsync(itemId, null);
        }
        
        /// <remarks/>
        public void DeleteExchangeOrganizationAsync(int itemId, object userState) {
            if ((this.DeleteExchangeOrganizationOperationCompleted == null)) {
                this.DeleteExchangeOrganizationOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteExchangeOrganizationOperationCompleted);
            }
            this.InvokeAsync("DeleteExchangeOrganization", new object[] {
                        itemId}, this.DeleteExchangeOrganizationOperationCompleted, userState);
        }
        
        private void OnDeleteExchangeOrganizationOperationCompleted(object arg) {
            if ((this.DeleteExchangeOrganizationCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteExchangeOrganizationCompleted(this, new DeleteExchangeOrganizationCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetOrganizationsCompletedEventHandler(object sender, GetOrganizationsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetOrganizationsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetOrganizationsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExchangeOrganization[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExchangeOrganization[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void CreateExchangeOrganizationCompletedEventHandler(object sender, CreateExchangeOrganizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CreateExchangeOrganizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal CreateExchangeOrganizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public IntResult Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((IntResult)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetExchangeOrganizationDetailsCompletedEventHandler(object sender, GetExchangeOrganizationDetailsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExchangeOrganizationDetailsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExchangeOrganizationDetailsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExchangeOrganization Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExchangeOrganization)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetExchangeOrganizationDomainsCompletedEventHandler(object sender, GetExchangeOrganizationDomainsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExchangeOrganizationDomainsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExchangeOrganizationDomainsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ExchangeOrganizationDomain[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ExchangeOrganizationDomain[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void GetExchangeOrganizationSummaryCompletedEventHandler(object sender, GetExchangeOrganizationSummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetExchangeOrganizationSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetExchangeOrganizationSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void SendExchangeOrganizationSummaryCompletedEventHandler(object sender, SendExchangeOrganizationSummaryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class SendExchangeOrganizationSummaryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal SendExchangeOrganizationSummaryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void AddExchangeOrganizationDomainCompletedEventHandler(object sender, AddExchangeOrganizationDomainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddExchangeOrganizationDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddExchangeOrganizationDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteExchangeOrganizationDomainCompletedEventHandler(object sender, DeleteExchangeOrganizationDomainCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteExchangeOrganizationDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteExchangeOrganizationDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateExchangeOrganizationQuotasCompletedEventHandler(object sender, UpdateExchangeOrganizationQuotasCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateExchangeOrganizationQuotasCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateExchangeOrganizationQuotasCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateExchangeOrganizationCatchAllAddressCompletedEventHandler(object sender, UpdateExchangeOrganizationCatchAllAddressCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateExchangeOrganizationCatchAllAddressCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateExchangeOrganizationCatchAllAddressCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void UpdateExchangeOrganizationServicePlanCompletedEventHandler(object sender, UpdateExchangeOrganizationServicePlanCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateExchangeOrganizationServicePlanCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateExchangeOrganizationServicePlanCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    public delegate void DeleteExchangeOrganizationCompletedEventHandler(object sender, DeleteExchangeOrganizationCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.42")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteExchangeOrganizationCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteExchangeOrganizationCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
}
