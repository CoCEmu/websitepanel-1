// Copyright (c) 2010, SMB SAAS Systems Inc.
// All rights reserved.
//
// Redistribution and use in source and binary forms, with or without modification,
// are permitted provided that the following conditions are met:
//
// - Redistributions of source code must  retain  the  above copyright notice, this
//   list of conditions and the following disclaimer.
//
// - Redistributions in binary form  must  reproduce the  above  copyright  notice,
//   this list of conditions  and  the  following  disclaimer in  the documentation
//   and/or other materials provided with the distribution.
//
// - Neither  the  name  of  the  SMB SAAS Systems Inc.  nor   the   names  of  its
//   contributors may be used to endorse or  promote  products  derived  from  this
//   software without specific prior written permission.
//
// THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS" AND
// ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING,  BUT  NOT  LIMITED TO, THE IMPLIED
// WARRANTIES  OF  MERCHANTABILITY   AND  FITNESS  FOR  A  PARTICULAR  PURPOSE  ARE
// DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE LIABLE FOR
// ANY DIRECT, INDIRECT, INCIDENTAL,  SPECIAL,  EXEMPLARY, OR CONSEQUENTIAL DAMAGES
// (INCLUDING, BUT NOT LIMITED TO,  PROCUREMENT  OF  SUBSTITUTE  GOODS OR SERVICES;
// LOSS OF USE, DATA, OR PROFITS; OR BUSINESS INTERRUPTION)  HOWEVER  CAUSED AND ON
// ANY  THEORY  OF  LIABILITY,  WHETHER  IN  CONTRACT,  STRICT  LIABILITY,  OR TORT
// (INCLUDING NEGLIGENCE OR OTHERWISE)  ARISING  IN  ANY WAY OUT OF THE USE OF THIS
// SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.

//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:2.0.50727.3053
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

// 
// This source code was auto-generated by wsdl, Version=2.0.50727.3038.
// 
namespace WebsitePanel.EnterpriseServer {
    using System.Diagnostics;
    using System.Web.Services;
    using System.ComponentModel;
    using System.Web.Services.Protocols;
    using System;
    using System.Xml.Serialization;
    using System.Data;
	using WebsitePanel.Providers;
	using WebsitePanel.Providers.Common;
	using WebsitePanel.Providers.Web;
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    [System.Web.Services.WebServiceBindingAttribute(Name="esWebServersSoap", Namespace="http://smbsaas/websitepanel/enterpriseserver")]
    [System.Xml.Serialization.XmlIncludeAttribute(typeof(ServiceProviderItem))]
    public partial class esWebServers : Microsoft.Web.Services3.WebServicesClientProtocol {
        
        private System.Threading.SendOrPostCallback GetRawWebSitesPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWebSitesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWebSiteOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVirtualDirectoriesOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetVirtualDirectoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetWebSitePointersOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddWebSitePointerOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteWebSitePointerOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddWebSiteOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddVirtualDirectoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateWebSiteOperationCompleted;
        
        private System.Threading.SendOrPostCallback InstallFrontPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback UninstallFrontPageOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeFrontPagePasswordOperationCompleted;
        
        private System.Threading.SendOrPostCallback RepairWebSiteOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateVirtualDirectoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteWebSiteOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteVirtualDirectoryOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeSiteStateOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSharedSSLDomainsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetRawSSLFoldersPagedOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSharedSSLFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSharedSSLFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback AddSharedSSLFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSharedSSLFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSharedSSLFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback InstallSecuredFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback UninstallSecuredFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSecuredFoldersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSecuredFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSecuredFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSecuredFolderOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSecuredUsersOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSecuredUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSecuredUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSecuredUserOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSecuredGroupsOperationCompleted;
        
        private System.Threading.SendOrPostCallback GetSecuredGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback UpdateSecuredGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback DeleteSecuredGroupOperationCompleted;
        
        private System.Threading.SendOrPostCallback GrantWebManagementAccessOperationCompleted;
        
        private System.Threading.SendOrPostCallback RevokeWebManagementAccessOperationCompleted;
        
        private System.Threading.SendOrPostCallback ChangeWebManagementAccessPasswordOperationCompleted;

        private System.Threading.SendOrPostCallback CertificateRequestOperationCompleted;

        private System.Threading.SendOrPostCallback InstallCertificateOperationCompleted;

        private System.Threading.SendOrPostCallback InstallPfxOperationCompleted;

        private System.Threading.SendOrPostCallback GetPendingCertificatesOperationCompleted;

        private System.Threading.SendOrPostCallback GetSSLCertificateByIDOperationCompleted;

        private System.Threading.SendOrPostCallback GetSiteCertOperationCompleted;

        private System.Threading.SendOrPostCallback CheckSSLForWebsiteOperationCompleted;

        private System.Threading.SendOrPostCallback CheckSSLForDomainOperationCompleted;

        private System.Threading.SendOrPostCallback ExportCertificateOperationCompleted;

        private System.Threading.SendOrPostCallback GetCertificatesForSiteOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteCertificateOperationCompleted;

        private System.Threading.SendOrPostCallback ImportCertificateOperationCompleted;

        private System.Threading.SendOrPostCallback CheckCertificateOperationCompleted;

        private System.Threading.SendOrPostCallback DeleteCertificateRequestOperationCompleted;
        
        /// <remarks/>
        public esWebServers() {
            this.Url = "http://localhost:1625/esWebServers.asmx";
        }
        
        /// <remarks/>
        public event GetRawWebSitesPagedCompletedEventHandler GetRawWebSitesPagedCompleted;
        
        /// <remarks/>
        public event GetWebSitesCompletedEventHandler GetWebSitesCompleted;
        
        /// <remarks/>
        public event GetWebSiteCompletedEventHandler GetWebSiteCompleted;
        
        /// <remarks/>
        public event GetVirtualDirectoriesCompletedEventHandler GetVirtualDirectoriesCompleted;
        
        /// <remarks/>
        public event GetVirtualDirectoryCompletedEventHandler GetVirtualDirectoryCompleted;
        
        /// <remarks/>
        public event GetWebSitePointersCompletedEventHandler GetWebSitePointersCompleted;
        
        /// <remarks/>
        public event AddWebSitePointerCompletedEventHandler AddWebSitePointerCompleted;
        
        /// <remarks/>
        public event DeleteWebSitePointerCompletedEventHandler DeleteWebSitePointerCompleted;
        
        /// <remarks/>
        public event AddWebSiteCompletedEventHandler AddWebSiteCompleted;
        
        /// <remarks/>
        public event AddVirtualDirectoryCompletedEventHandler AddVirtualDirectoryCompleted;
        
        /// <remarks/>
        public event UpdateWebSiteCompletedEventHandler UpdateWebSiteCompleted;
        
        /// <remarks/>
        public event InstallFrontPageCompletedEventHandler InstallFrontPageCompleted;
        
        /// <remarks/>
        public event UninstallFrontPageCompletedEventHandler UninstallFrontPageCompleted;
        
        /// <remarks/>
        public event ChangeFrontPagePasswordCompletedEventHandler ChangeFrontPagePasswordCompleted;
        
        /// <remarks/>
        public event RepairWebSiteCompletedEventHandler RepairWebSiteCompleted;
        
        /// <remarks/>
        public event UpdateVirtualDirectoryCompletedEventHandler UpdateVirtualDirectoryCompleted;
        
        /// <remarks/>
        public event DeleteWebSiteCompletedEventHandler DeleteWebSiteCompleted;
        
        /// <remarks/>
        public event DeleteVirtualDirectoryCompletedEventHandler DeleteVirtualDirectoryCompleted;
        
        /// <remarks/>
        public event ChangeSiteStateCompletedEventHandler ChangeSiteStateCompleted;
        
        /// <remarks/>
        public event GetSharedSSLDomainsCompletedEventHandler GetSharedSSLDomainsCompleted;
        
        /// <remarks/>
        public event GetRawSSLFoldersPagedCompletedEventHandler GetRawSSLFoldersPagedCompleted;
        
        /// <remarks/>
        public event GetSharedSSLFoldersCompletedEventHandler GetSharedSSLFoldersCompleted;
        
        /// <remarks/>
        public event GetSharedSSLFolderCompletedEventHandler GetSharedSSLFolderCompleted;
        
        /// <remarks/>
        public event AddSharedSSLFolderCompletedEventHandler AddSharedSSLFolderCompleted;
        
        /// <remarks/>
        public event UpdateSharedSSLFolderCompletedEventHandler UpdateSharedSSLFolderCompleted;
        
        /// <remarks/>
        public event DeleteSharedSSLFolderCompletedEventHandler DeleteSharedSSLFolderCompleted;
        
        /// <remarks/>
        public event InstallSecuredFoldersCompletedEventHandler InstallSecuredFoldersCompleted;
        
        /// <remarks/>
        public event UninstallSecuredFoldersCompletedEventHandler UninstallSecuredFoldersCompleted;
        
        /// <remarks/>
        public event GetSecuredFoldersCompletedEventHandler GetSecuredFoldersCompleted;
        
        /// <remarks/>
        public event GetSecuredFolderCompletedEventHandler GetSecuredFolderCompleted;
        
        /// <remarks/>
        public event UpdateSecuredFolderCompletedEventHandler UpdateSecuredFolderCompleted;
        
        /// <remarks/>
        public event DeleteSecuredFolderCompletedEventHandler DeleteSecuredFolderCompleted;
        
        /// <remarks/>
        public event GetSecuredUsersCompletedEventHandler GetSecuredUsersCompleted;
        
        /// <remarks/>
        public event GetSecuredUserCompletedEventHandler GetSecuredUserCompleted;
        
        /// <remarks/>
        public event UpdateSecuredUserCompletedEventHandler UpdateSecuredUserCompleted;
        
        /// <remarks/>
        public event DeleteSecuredUserCompletedEventHandler DeleteSecuredUserCompleted;
        
        /// <remarks/>
        public event GetSecuredGroupsCompletedEventHandler GetSecuredGroupsCompleted;
        
        /// <remarks/>
        public event GetSecuredGroupCompletedEventHandler GetSecuredGroupCompleted;
        
        /// <remarks/>
        public event UpdateSecuredGroupCompletedEventHandler UpdateSecuredGroupCompleted;
        
        /// <remarks/>
        public event DeleteSecuredGroupCompletedEventHandler DeleteSecuredGroupCompleted;
        
        /// <remarks/>
        public event GrantWebManagementAccessCompletedEventHandler GrantWebManagementAccessCompleted;
        
        /// <remarks/>
        public event RevokeWebManagementAccessCompletedEventHandler RevokeWebManagementAccessCompleted;
        
        /// <remarks/>
        public event ChangeWebManagementAccessPasswordCompletedEventHandler ChangeWebManagementAccessPasswordCompleted;

        /// <remarks/>
        public event CertificateRequestCompletedEventHandler CertificateRequestCompleted;

        /// <remarks/>
        public event InstallCertificateCompletedEventHandler InstallCertificateCompleted;

        /// <remarks/>
        public event InstallPfxCompletedEventHandler InstallPfxCompleted;

        /// <remarks/>
        public event GetPendingCertificatesCompletedEventHandler GetPendingCertificatesCompleted;

        /// <remarks/>
        public event GetSSLCertificateByIDCompletedEventHandler GetSSLCertificateByIDCompleted;

        /// <remarks/>
        public event GetSiteCertCompletedEventHandler GetSiteCertCompleted;

        /// <remarks/>
        public event CheckSSLForWebsiteCompletedEventHandler CheckSSLForWebsiteCompleted;

        /// <remarks/>
        public event CheckSSLForDomainCompletedEventHandler CheckSSLForDomainCompleted;

        /// <remarks/>
        public event ExportCertificateCompletedEventHandler ExportCertificateCompleted;

        /// <remarks/>
        public event GetCertificatesForSiteCompletedEventHandler GetCertificatesForSiteCompleted;

        /// <remarks/>
        public event DeleteCertificateCompletedEventHandler DeleteCertificateCompleted;

        /// <remarks/>
        public event ImportCertificateCompletedEventHandler ImportCertificateCompleted;

        /// <remarks/>
        public event CheckCertificateCompletedEventHandler CheckCertificateCompleted;

        /// <remarks/>
        public event DeleteCertificateRequestCompletedEventHandler DeleteCertificateRequestCompleted;
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetRawWebSitesPaged", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRawWebSitesPaged(int packageId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            object[] results = this.Invoke("GetRawWebSitesPaged", new object[] {
                        packageId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRawWebSitesPaged(int packageId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRawWebSitesPaged", new object[] {
                        packageId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetRawWebSitesPaged(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRawWebSitesPagedAsync(int packageId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            this.GetRawWebSitesPagedAsync(packageId, filterColumn, filterValue, sortColumn, startRow, maximumRows, null);
        }
        
        /// <remarks/>
        public void GetRawWebSitesPagedAsync(int packageId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, object userState) {
            if ((this.GetRawWebSitesPagedOperationCompleted == null)) {
                this.GetRawWebSitesPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawWebSitesPagedOperationCompleted);
            }
            this.InvokeAsync("GetRawWebSitesPaged", new object[] {
                        packageId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetRawWebSitesPagedOperationCompleted, userState);
        }
        
        private void OnGetRawWebSitesPagedOperationCompleted(object arg) {
            if ((this.GetRawWebSitesPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRawWebSitesPagedCompleted(this, new GetRawWebSitesPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetWebSites", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebSite[] GetWebSites(int packageId, bool recursive) {
            object[] results = this.Invoke("GetWebSites", new object[] {
                        packageId,
                        recursive});
            return ((WebSite[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetWebSites(int packageId, bool recursive, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWebSites", new object[] {
                        packageId,
                        recursive}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebSite[] EndGetWebSites(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebSite[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWebSitesAsync(int packageId, bool recursive) {
            this.GetWebSitesAsync(packageId, recursive, null);
        }
        
        /// <remarks/>
        public void GetWebSitesAsync(int packageId, bool recursive, object userState) {
            if ((this.GetWebSitesOperationCompleted == null)) {
                this.GetWebSitesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebSitesOperationCompleted);
            }
            this.InvokeAsync("GetWebSites", new object[] {
                        packageId,
                        recursive}, this.GetWebSitesOperationCompleted, userState);
        }
        
        private void OnGetWebSitesOperationCompleted(object arg) {
            if ((this.GetWebSitesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebSitesCompleted(this, new GetWebSitesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetWebSite", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebSite GetWebSite(int siteItemId) {
            object[] results = this.Invoke("GetWebSite", new object[] {
                        siteItemId});
            return ((WebSite)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetWebSite(int siteItemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWebSite", new object[] {
                        siteItemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebSite EndGetWebSite(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebSite)(results[0]));
        }
        
        /// <remarks/>
        public void GetWebSiteAsync(int siteItemId) {
            this.GetWebSiteAsync(siteItemId, null);
        }
        
        /// <remarks/>
        public void GetWebSiteAsync(int siteItemId, object userState) {
            if ((this.GetWebSiteOperationCompleted == null)) {
                this.GetWebSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebSiteOperationCompleted);
            }
            this.InvokeAsync("GetWebSite", new object[] {
                        siteItemId}, this.GetWebSiteOperationCompleted, userState);
        }
        
        private void OnGetWebSiteOperationCompleted(object arg) {
            if ((this.GetWebSiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebSiteCompleted(this, new GetWebSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetVirtualDirectories", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebVirtualDirectory[] GetVirtualDirectories(int siteItemId) {
            object[] results = this.Invoke("GetVirtualDirectories", new object[] {
                        siteItemId});
            return ((WebVirtualDirectory[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetVirtualDirectories(int siteItemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetVirtualDirectories", new object[] {
                        siteItemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebVirtualDirectory[] EndGetVirtualDirectories(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebVirtualDirectory[])(results[0]));
        }
        
        /// <remarks/>
        public void GetVirtualDirectoriesAsync(int siteItemId) {
            this.GetVirtualDirectoriesAsync(siteItemId, null);
        }
        
        /// <remarks/>
        public void GetVirtualDirectoriesAsync(int siteItemId, object userState) {
            if ((this.GetVirtualDirectoriesOperationCompleted == null)) {
                this.GetVirtualDirectoriesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVirtualDirectoriesOperationCompleted);
            }
            this.InvokeAsync("GetVirtualDirectories", new object[] {
                        siteItemId}, this.GetVirtualDirectoriesOperationCompleted, userState);
        }
        
        private void OnGetVirtualDirectoriesOperationCompleted(object arg) {
            if ((this.GetVirtualDirectoriesCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVirtualDirectoriesCompleted(this, new GetVirtualDirectoriesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetVirtualDirectory", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebVirtualDirectory GetVirtualDirectory(int siteItemId, string vdirName) {
            object[] results = this.Invoke("GetVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName});
            return ((WebVirtualDirectory)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetVirtualDirectory(int siteItemId, string vdirName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebVirtualDirectory EndGetVirtualDirectory(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebVirtualDirectory)(results[0]));
        }
        
        /// <remarks/>
        public void GetVirtualDirectoryAsync(int siteItemId, string vdirName) {
            this.GetVirtualDirectoryAsync(siteItemId, vdirName, null);
        }
        
        /// <remarks/>
        public void GetVirtualDirectoryAsync(int siteItemId, string vdirName, object userState) {
            if ((this.GetVirtualDirectoryOperationCompleted == null)) {
                this.GetVirtualDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetVirtualDirectoryOperationCompleted);
            }
            this.InvokeAsync("GetVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName}, this.GetVirtualDirectoryOperationCompleted, userState);
        }
        
        private void OnGetVirtualDirectoryOperationCompleted(object arg) {
            if ((this.GetVirtualDirectoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetVirtualDirectoryCompleted(this, new GetVirtualDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetWebSitePointers", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public DomainInfo[] GetWebSitePointers(int siteItemId) {
            object[] results = this.Invoke("GetWebSitePointers", new object[] {
                        siteItemId});
            return ((DomainInfo[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetWebSitePointers(int siteItemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetWebSitePointers", new object[] {
                        siteItemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public DomainInfo[] EndGetWebSitePointers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((DomainInfo[])(results[0]));
        }
        
        /// <remarks/>
        public void GetWebSitePointersAsync(int siteItemId) {
            this.GetWebSitePointersAsync(siteItemId, null);
        }
        
        /// <remarks/>
        public void GetWebSitePointersAsync(int siteItemId, object userState) {
            if ((this.GetWebSitePointersOperationCompleted == null)) {
                this.GetWebSitePointersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetWebSitePointersOperationCompleted);
            }
            this.InvokeAsync("GetWebSitePointers", new object[] {
                        siteItemId}, this.GetWebSitePointersOperationCompleted, userState);
        }
        
        private void OnGetWebSitePointersOperationCompleted(object arg) {
            if ((this.GetWebSitePointersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetWebSitePointersCompleted(this, new GetWebSitePointersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/AddWebSitePointer", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddWebSitePointer(int siteItemId, int domainId) {
            object[] results = this.Invoke("AddWebSitePointer", new object[] {
                        siteItemId,
                        domainId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddWebSitePointer(int siteItemId, int domainId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddWebSitePointer", new object[] {
                        siteItemId,
                        domainId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddWebSitePointer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddWebSitePointerAsync(int siteItemId, int domainId) {
            this.AddWebSitePointerAsync(siteItemId, domainId, null);
        }
        
        /// <remarks/>
        public void AddWebSitePointerAsync(int siteItemId, int domainId, object userState) {
            if ((this.AddWebSitePointerOperationCompleted == null)) {
                this.AddWebSitePointerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddWebSitePointerOperationCompleted);
            }
            this.InvokeAsync("AddWebSitePointer", new object[] {
                        siteItemId,
                        domainId}, this.AddWebSitePointerOperationCompleted, userState);
        }
        
        private void OnAddWebSitePointerOperationCompleted(object arg) {
            if ((this.AddWebSitePointerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddWebSitePointerCompleted(this, new AddWebSitePointerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/DeleteWebSitePointer", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteWebSitePointer(int siteItemId, int domainId) {
            object[] results = this.Invoke("DeleteWebSitePointer", new object[] {
                        siteItemId,
                        domainId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteWebSitePointer(int siteItemId, int domainId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteWebSitePointer", new object[] {
                        siteItemId,
                        domainId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDeleteWebSitePointer(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteWebSitePointerAsync(int siteItemId, int domainId) {
            this.DeleteWebSitePointerAsync(siteItemId, domainId, null);
        }
        
        /// <remarks/>
        public void DeleteWebSitePointerAsync(int siteItemId, int domainId, object userState) {
            if ((this.DeleteWebSitePointerOperationCompleted == null)) {
                this.DeleteWebSitePointerOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteWebSitePointerOperationCompleted);
            }
            this.InvokeAsync("DeleteWebSitePointer", new object[] {
                        siteItemId,
                        domainId}, this.DeleteWebSitePointerOperationCompleted, userState);
        }
        
        private void OnDeleteWebSitePointerOperationCompleted(object arg) {
            if ((this.DeleteWebSitePointerCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteWebSitePointerCompleted(this, new DeleteWebSitePointerCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/AddWebSite", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddWebSite(int packageId, int domainId, int ipAddressId) {
            object[] results = this.Invoke("AddWebSite", new object[] {
                        packageId,
                        domainId,
                        ipAddressId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddWebSite(int packageId, int domainId, int ipAddressId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddWebSite", new object[] {
                        packageId,
                        domainId,
                        ipAddressId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddWebSite(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddWebSiteAsync(int packageId, int domainId, int ipAddressId) {
            this.AddWebSiteAsync(packageId, domainId, ipAddressId, null);
        }
        
        /// <remarks/>
        public void AddWebSiteAsync(int packageId, int domainId, int ipAddressId, object userState) {
            if ((this.AddWebSiteOperationCompleted == null)) {
                this.AddWebSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddWebSiteOperationCompleted);
            }
            this.InvokeAsync("AddWebSite", new object[] {
                        packageId,
                        domainId,
                        ipAddressId}, this.AddWebSiteOperationCompleted, userState);
        }
        
        private void OnAddWebSiteOperationCompleted(object arg) {
            if ((this.AddWebSiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddWebSiteCompleted(this, new AddWebSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/AddVirtualDirectory", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddVirtualDirectory(int siteItemId, string vdirName, string vdirPath, string aspNetVersion) {
            object[] results = this.Invoke("AddVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName,
                        vdirPath,
                        aspNetVersion});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddVirtualDirectory(int siteItemId, string vdirName, string vdirPath, string aspNetVersion, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName,
                        vdirPath,
                        aspNetVersion}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddVirtualDirectory(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddVirtualDirectoryAsync(int siteItemId, string vdirName, string vdirPath, string aspNetVersion) {
            this.AddVirtualDirectoryAsync(siteItemId, vdirName, vdirPath, aspNetVersion, null);
        }
        
        /// <remarks/>
        public void AddVirtualDirectoryAsync(int siteItemId, string vdirName, string vdirPath, string aspNetVersion, object userState) {
            if ((this.AddVirtualDirectoryOperationCompleted == null)) {
                this.AddVirtualDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddVirtualDirectoryOperationCompleted);
            }
            this.InvokeAsync("AddVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName,
                        vdirPath,
                        aspNetVersion}, this.AddVirtualDirectoryOperationCompleted, userState);
        }
        
        private void OnAddVirtualDirectoryOperationCompleted(object arg) {
            if ((this.AddVirtualDirectoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddVirtualDirectoryCompleted(this, new AddVirtualDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/UpdateWebSite", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateWebSite(WebSite site) {
            object[] results = this.Invoke("UpdateWebSite", new object[] {
                        site});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateWebSite(WebSite site, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateWebSite", new object[] {
                        site}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUpdateWebSite(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateWebSiteAsync(WebSite site) {
            this.UpdateWebSiteAsync(site, null);
        }
        
        /// <remarks/>
        public void UpdateWebSiteAsync(WebSite site, object userState) {
            if ((this.UpdateWebSiteOperationCompleted == null)) {
                this.UpdateWebSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateWebSiteOperationCompleted);
            }
            this.InvokeAsync("UpdateWebSite", new object[] {
                        site}, this.UpdateWebSiteOperationCompleted, userState);
        }
        
        private void OnUpdateWebSiteOperationCompleted(object arg) {
            if ((this.UpdateWebSiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateWebSiteCompleted(this, new UpdateWebSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/InstallFrontPage", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InstallFrontPage(int siteItemId, string username, string password) {
            object[] results = this.Invoke("InstallFrontPage", new object[] {
                        siteItemId,
                        username,
                        password});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInstallFrontPage(int siteItemId, string username, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InstallFrontPage", new object[] {
                        siteItemId,
                        username,
                        password}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndInstallFrontPage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InstallFrontPageAsync(int siteItemId, string username, string password) {
            this.InstallFrontPageAsync(siteItemId, username, password, null);
        }
        
        /// <remarks/>
        public void InstallFrontPageAsync(int siteItemId, string username, string password, object userState) {
            if ((this.InstallFrontPageOperationCompleted == null)) {
                this.InstallFrontPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallFrontPageOperationCompleted);
            }
            this.InvokeAsync("InstallFrontPage", new object[] {
                        siteItemId,
                        username,
                        password}, this.InstallFrontPageOperationCompleted, userState);
        }
        
        private void OnInstallFrontPageOperationCompleted(object arg) {
            if ((this.InstallFrontPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallFrontPageCompleted(this, new InstallFrontPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/UninstallFrontPage", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UninstallFrontPage(int siteItemId) {
            object[] results = this.Invoke("UninstallFrontPage", new object[] {
                        siteItemId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUninstallFrontPage(int siteItemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UninstallFrontPage", new object[] {
                        siteItemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUninstallFrontPage(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UninstallFrontPageAsync(int siteItemId) {
            this.UninstallFrontPageAsync(siteItemId, null);
        }
        
        /// <remarks/>
        public void UninstallFrontPageAsync(int siteItemId, object userState) {
            if ((this.UninstallFrontPageOperationCompleted == null)) {
                this.UninstallFrontPageOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUninstallFrontPageOperationCompleted);
            }
            this.InvokeAsync("UninstallFrontPage", new object[] {
                        siteItemId}, this.UninstallFrontPageOperationCompleted, userState);
        }
        
        private void OnUninstallFrontPageOperationCompleted(object arg) {
            if ((this.UninstallFrontPageCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UninstallFrontPageCompleted(this, new UninstallFrontPageCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/ChangeFrontPagePassword", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ChangeFrontPagePassword(int siteItemId, string password) {
            object[] results = this.Invoke("ChangeFrontPagePassword", new object[] {
                        siteItemId,
                        password});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginChangeFrontPagePassword(int siteItemId, string password, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ChangeFrontPagePassword", new object[] {
                        siteItemId,
                        password}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndChangeFrontPagePassword(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeFrontPagePasswordAsync(int siteItemId, string password) {
            this.ChangeFrontPagePasswordAsync(siteItemId, password, null);
        }
        
        /// <remarks/>
        public void ChangeFrontPagePasswordAsync(int siteItemId, string password, object userState) {
            if ((this.ChangeFrontPagePasswordOperationCompleted == null)) {
                this.ChangeFrontPagePasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeFrontPagePasswordOperationCompleted);
            }
            this.InvokeAsync("ChangeFrontPagePassword", new object[] {
                        siteItemId,
                        password}, this.ChangeFrontPagePasswordOperationCompleted, userState);
        }
        
        private void OnChangeFrontPagePasswordOperationCompleted(object arg) {
            if ((this.ChangeFrontPagePasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeFrontPagePasswordCompleted(this, new ChangeFrontPagePasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/RepairWebSite", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int RepairWebSite(int siteItemId) {
            object[] results = this.Invoke("RepairWebSite", new object[] {
                        siteItemId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRepairWebSite(int siteItemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RepairWebSite", new object[] {
                        siteItemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndRepairWebSite(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void RepairWebSiteAsync(int siteItemId) {
            this.RepairWebSiteAsync(siteItemId, null);
        }
        
        /// <remarks/>
        public void RepairWebSiteAsync(int siteItemId, object userState) {
            if ((this.RepairWebSiteOperationCompleted == null)) {
                this.RepairWebSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRepairWebSiteOperationCompleted);
            }
            this.InvokeAsync("RepairWebSite", new object[] {
                        siteItemId}, this.RepairWebSiteOperationCompleted, userState);
        }
        
        private void OnRepairWebSiteOperationCompleted(object arg) {
            if ((this.RepairWebSiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RepairWebSiteCompleted(this, new RepairWebSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/UpdateVirtualDirectory", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateVirtualDirectory(int siteItemId, WebVirtualDirectory vdir) {
            object[] results = this.Invoke("UpdateVirtualDirectory", new object[] {
                        siteItemId,
                        vdir});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateVirtualDirectory(int siteItemId, WebVirtualDirectory vdir, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateVirtualDirectory", new object[] {
                        siteItemId,
                        vdir}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUpdateVirtualDirectory(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateVirtualDirectoryAsync(int siteItemId, WebVirtualDirectory vdir) {
            this.UpdateVirtualDirectoryAsync(siteItemId, vdir, null);
        }
        
        /// <remarks/>
        public void UpdateVirtualDirectoryAsync(int siteItemId, WebVirtualDirectory vdir, object userState) {
            if ((this.UpdateVirtualDirectoryOperationCompleted == null)) {
                this.UpdateVirtualDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateVirtualDirectoryOperationCompleted);
            }
            this.InvokeAsync("UpdateVirtualDirectory", new object[] {
                        siteItemId,
                        vdir}, this.UpdateVirtualDirectoryOperationCompleted, userState);
        }
        
        private void OnUpdateVirtualDirectoryOperationCompleted(object arg) {
            if ((this.UpdateVirtualDirectoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateVirtualDirectoryCompleted(this, new UpdateVirtualDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/DeleteWebSite", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteWebSite(int siteItemId) {
            object[] results = this.Invoke("DeleteWebSite", new object[] {
                        siteItemId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteWebSite(int siteItemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteWebSite", new object[] {
                        siteItemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDeleteWebSite(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteWebSiteAsync(int siteItemId) {
            this.DeleteWebSiteAsync(siteItemId, null);
        }
        
        /// <remarks/>
        public void DeleteWebSiteAsync(int siteItemId, object userState) {
            if ((this.DeleteWebSiteOperationCompleted == null)) {
                this.DeleteWebSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteWebSiteOperationCompleted);
            }
            this.InvokeAsync("DeleteWebSite", new object[] {
                        siteItemId}, this.DeleteWebSiteOperationCompleted, userState);
        }
        
        private void OnDeleteWebSiteOperationCompleted(object arg) {
            if ((this.DeleteWebSiteCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteWebSiteCompleted(this, new DeleteWebSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/DeleteVirtualDirectory", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteVirtualDirectory(int siteItemId, string vdirName) {
            object[] results = this.Invoke("DeleteVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteVirtualDirectory(int siteItemId, string vdirName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDeleteVirtualDirectory(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteVirtualDirectoryAsync(int siteItemId, string vdirName) {
            this.DeleteVirtualDirectoryAsync(siteItemId, vdirName, null);
        }
        
        /// <remarks/>
        public void DeleteVirtualDirectoryAsync(int siteItemId, string vdirName, object userState) {
            if ((this.DeleteVirtualDirectoryOperationCompleted == null)) {
                this.DeleteVirtualDirectoryOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteVirtualDirectoryOperationCompleted);
            }
            this.InvokeAsync("DeleteVirtualDirectory", new object[] {
                        siteItemId,
                        vdirName}, this.DeleteVirtualDirectoryOperationCompleted, userState);
        }
        
        private void OnDeleteVirtualDirectoryOperationCompleted(object arg) {
            if ((this.DeleteVirtualDirectoryCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteVirtualDirectoryCompleted(this, new DeleteVirtualDirectoryCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/ChangeSiteState", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int ChangeSiteState(int siteItemId, ServerState state) {
            object[] results = this.Invoke("ChangeSiteState", new object[] {
                        siteItemId,
                        state});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginChangeSiteState(int siteItemId, ServerState state, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ChangeSiteState", new object[] {
                        siteItemId,
                        state}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndChangeSiteState(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeSiteStateAsync(int siteItemId, ServerState state) {
            this.ChangeSiteStateAsync(siteItemId, state, null);
        }
        
        /// <remarks/>
        public void ChangeSiteStateAsync(int siteItemId, ServerState state, object userState) {
            if ((this.ChangeSiteStateOperationCompleted == null)) {
                this.ChangeSiteStateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeSiteStateOperationCompleted);
            }
            this.InvokeAsync("ChangeSiteState", new object[] {
                        siteItemId,
                        state}, this.ChangeSiteStateOperationCompleted, userState);
        }
        
        private void OnChangeSiteStateOperationCompleted(object arg) {
            if ((this.ChangeSiteStateCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeSiteStateCompleted(this, new ChangeSiteStateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetSharedSSLDomains", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public string[] GetSharedSSLDomains(int packageId) {
            object[] results = this.Invoke("GetSharedSSLDomains", new object[] {
                        packageId});
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSharedSSLDomains(int packageId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSharedSSLDomains", new object[] {
                        packageId}, callback, asyncState);
        }
        
        /// <remarks/>
        public string[] EndGetSharedSSLDomains(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((string[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSharedSSLDomainsAsync(int packageId) {
            this.GetSharedSSLDomainsAsync(packageId, null);
        }
        
        /// <remarks/>
        public void GetSharedSSLDomainsAsync(int packageId, object userState) {
            if ((this.GetSharedSSLDomainsOperationCompleted == null)) {
                this.GetSharedSSLDomainsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSharedSSLDomainsOperationCompleted);
            }
            this.InvokeAsync("GetSharedSSLDomains", new object[] {
                        packageId}, this.GetSharedSSLDomainsOperationCompleted, userState);
        }
        
        private void OnGetSharedSSLDomainsOperationCompleted(object arg) {
            if ((this.GetSharedSSLDomainsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSharedSSLDomainsCompleted(this, new GetSharedSSLDomainsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetRawSSLFoldersPaged", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public System.Data.DataSet GetRawSSLFoldersPaged(int packageId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            object[] results = this.Invoke("GetRawSSLFoldersPaged", new object[] {
                        packageId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows});
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetRawSSLFoldersPaged(int packageId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetRawSSLFoldersPaged", new object[] {
                        packageId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, callback, asyncState);
        }
        
        /// <remarks/>
        public System.Data.DataSet EndGetRawSSLFoldersPaged(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((System.Data.DataSet)(results[0]));
        }
        
        /// <remarks/>
        public void GetRawSSLFoldersPagedAsync(int packageId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows) {
            this.GetRawSSLFoldersPagedAsync(packageId, filterColumn, filterValue, sortColumn, startRow, maximumRows, null);
        }
        
        /// <remarks/>
        public void GetRawSSLFoldersPagedAsync(int packageId, string filterColumn, string filterValue, string sortColumn, int startRow, int maximumRows, object userState) {
            if ((this.GetRawSSLFoldersPagedOperationCompleted == null)) {
                this.GetRawSSLFoldersPagedOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetRawSSLFoldersPagedOperationCompleted);
            }
            this.InvokeAsync("GetRawSSLFoldersPaged", new object[] {
                        packageId,
                        filterColumn,
                        filterValue,
                        sortColumn,
                        startRow,
                        maximumRows}, this.GetRawSSLFoldersPagedOperationCompleted, userState);
        }
        
        private void OnGetRawSSLFoldersPagedOperationCompleted(object arg) {
            if ((this.GetRawSSLFoldersPagedCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetRawSSLFoldersPagedCompleted(this, new GetRawSSLFoldersPagedCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetSharedSSLFolders", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SharedSSLFolder[] GetSharedSSLFolders(int packageId, bool recursive) {
            object[] results = this.Invoke("GetSharedSSLFolders", new object[] {
                        packageId,
                        recursive});
            return ((SharedSSLFolder[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSharedSSLFolders(int packageId, bool recursive, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSharedSSLFolders", new object[] {
                        packageId,
                        recursive}, callback, asyncState);
        }
        
        /// <remarks/>
        public SharedSSLFolder[] EndGetSharedSSLFolders(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SharedSSLFolder[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSharedSSLFoldersAsync(int packageId, bool recursive) {
            this.GetSharedSSLFoldersAsync(packageId, recursive, null);
        }
        
        /// <remarks/>
        public void GetSharedSSLFoldersAsync(int packageId, bool recursive, object userState) {
            if ((this.GetSharedSSLFoldersOperationCompleted == null)) {
                this.GetSharedSSLFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSharedSSLFoldersOperationCompleted);
            }
            this.InvokeAsync("GetSharedSSLFolders", new object[] {
                        packageId,
                        recursive}, this.GetSharedSSLFoldersOperationCompleted, userState);
        }
        
        private void OnGetSharedSSLFoldersOperationCompleted(object arg) {
            if ((this.GetSharedSSLFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSharedSSLFoldersCompleted(this, new GetSharedSSLFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetSharedSSLFolder", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SharedSSLFolder GetSharedSSLFolder(int itemId) {
            object[] results = this.Invoke("GetSharedSSLFolder", new object[] {
                        itemId});
            return ((SharedSSLFolder)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSharedSSLFolder(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSharedSSLFolder", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public SharedSSLFolder EndGetSharedSSLFolder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((SharedSSLFolder)(results[0]));
        }
        
        /// <remarks/>
        public void GetSharedSSLFolderAsync(int itemId) {
            this.GetSharedSSLFolderAsync(itemId, null);
        }
        
        /// <remarks/>
        public void GetSharedSSLFolderAsync(int itemId, object userState) {
            if ((this.GetSharedSSLFolderOperationCompleted == null)) {
                this.GetSharedSSLFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSharedSSLFolderOperationCompleted);
            }
            this.InvokeAsync("GetSharedSSLFolder", new object[] {
                        itemId}, this.GetSharedSSLFolderOperationCompleted, userState);
        }
        
        private void OnGetSharedSSLFolderOperationCompleted(object arg) {
            if ((this.GetSharedSSLFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSharedSSLFolderCompleted(this, new GetSharedSSLFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/AddSharedSSLFolder", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int AddSharedSSLFolder(int packageId, string sslDomain, int siteId, string vdirName, string vdirPath) {
            object[] results = this.Invoke("AddSharedSSLFolder", new object[] {
                        packageId,
                        sslDomain,
                        siteId,
                        vdirName,
                        vdirPath});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginAddSharedSSLFolder(int packageId, string sslDomain, int siteId, string vdirName, string vdirPath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("AddSharedSSLFolder", new object[] {
                        packageId,
                        sslDomain,
                        siteId,
                        vdirName,
                        vdirPath}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndAddSharedSSLFolder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void AddSharedSSLFolderAsync(int packageId, string sslDomain, int siteId, string vdirName, string vdirPath) {
            this.AddSharedSSLFolderAsync(packageId, sslDomain, siteId, vdirName, vdirPath, null);
        }
        
        /// <remarks/>
        public void AddSharedSSLFolderAsync(int packageId, string sslDomain, int siteId, string vdirName, string vdirPath, object userState) {
            if ((this.AddSharedSSLFolderOperationCompleted == null)) {
                this.AddSharedSSLFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnAddSharedSSLFolderOperationCompleted);
            }
            this.InvokeAsync("AddSharedSSLFolder", new object[] {
                        packageId,
                        sslDomain,
                        siteId,
                        vdirName,
                        vdirPath}, this.AddSharedSSLFolderOperationCompleted, userState);
        }
        
        private void OnAddSharedSSLFolderOperationCompleted(object arg) {
            if ((this.AddSharedSSLFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.AddSharedSSLFolderCompleted(this, new AddSharedSSLFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/UpdateSharedSSLFolder", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateSharedSSLFolder(SharedSSLFolder vdir) {
            object[] results = this.Invoke("UpdateSharedSSLFolder", new object[] {
                        vdir});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateSharedSSLFolder(SharedSSLFolder vdir, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateSharedSSLFolder", new object[] {
                        vdir}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUpdateSharedSSLFolder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSharedSSLFolderAsync(SharedSSLFolder vdir) {
            this.UpdateSharedSSLFolderAsync(vdir, null);
        }
        
        /// <remarks/>
        public void UpdateSharedSSLFolderAsync(SharedSSLFolder vdir, object userState) {
            if ((this.UpdateSharedSSLFolderOperationCompleted == null)) {
                this.UpdateSharedSSLFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSharedSSLFolderOperationCompleted);
            }
            this.InvokeAsync("UpdateSharedSSLFolder", new object[] {
                        vdir}, this.UpdateSharedSSLFolderOperationCompleted, userState);
        }
        
        private void OnUpdateSharedSSLFolderOperationCompleted(object arg) {
            if ((this.UpdateSharedSSLFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSharedSSLFolderCompleted(this, new UpdateSharedSSLFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/DeleteSharedSSLFolder", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteSharedSSLFolder(int itemId) {
            object[] results = this.Invoke("DeleteSharedSSLFolder", new object[] {
                        itemId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteSharedSSLFolder(int itemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteSharedSSLFolder", new object[] {
                        itemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDeleteSharedSSLFolder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteSharedSSLFolderAsync(int itemId) {
            this.DeleteSharedSSLFolderAsync(itemId, null);
        }
        
        /// <remarks/>
        public void DeleteSharedSSLFolderAsync(int itemId, object userState) {
            if ((this.DeleteSharedSSLFolderOperationCompleted == null)) {
                this.DeleteSharedSSLFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSharedSSLFolderOperationCompleted);
            }
            this.InvokeAsync("DeleteSharedSSLFolder", new object[] {
                        itemId}, this.DeleteSharedSSLFolderOperationCompleted, userState);
        }
        
        private void OnDeleteSharedSSLFolderOperationCompleted(object arg) {
            if ((this.DeleteSharedSSLFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSharedSSLFolderCompleted(this, new DeleteSharedSSLFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/InstallSecuredFolders", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int InstallSecuredFolders(int siteItemId) {
            object[] results = this.Invoke("InstallSecuredFolders", new object[] {
                        siteItemId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginInstallSecuredFolders(int siteItemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("InstallSecuredFolders", new object[] {
                        siteItemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndInstallSecuredFolders(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void InstallSecuredFoldersAsync(int siteItemId) {
            this.InstallSecuredFoldersAsync(siteItemId, null);
        }
        
        /// <remarks/>
        public void InstallSecuredFoldersAsync(int siteItemId, object userState) {
            if ((this.InstallSecuredFoldersOperationCompleted == null)) {
                this.InstallSecuredFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallSecuredFoldersOperationCompleted);
            }
            this.InvokeAsync("InstallSecuredFolders", new object[] {
                        siteItemId}, this.InstallSecuredFoldersOperationCompleted, userState);
        }
        
        private void OnInstallSecuredFoldersOperationCompleted(object arg) {
            if ((this.InstallSecuredFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallSecuredFoldersCompleted(this, new InstallSecuredFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/UninstallSecuredFolders", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UninstallSecuredFolders(int siteItemId) {
            object[] results = this.Invoke("UninstallSecuredFolders", new object[] {
                        siteItemId});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUninstallSecuredFolders(int siteItemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UninstallSecuredFolders", new object[] {
                        siteItemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUninstallSecuredFolders(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UninstallSecuredFoldersAsync(int siteItemId) {
            this.UninstallSecuredFoldersAsync(siteItemId, null);
        }
        
        /// <remarks/>
        public void UninstallSecuredFoldersAsync(int siteItemId, object userState) {
            if ((this.UninstallSecuredFoldersOperationCompleted == null)) {
                this.UninstallSecuredFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUninstallSecuredFoldersOperationCompleted);
            }
            this.InvokeAsync("UninstallSecuredFolders", new object[] {
                        siteItemId}, this.UninstallSecuredFoldersOperationCompleted, userState);
        }
        
        private void OnUninstallSecuredFoldersOperationCompleted(object arg) {
            if ((this.UninstallSecuredFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UninstallSecuredFoldersCompleted(this, new UninstallSecuredFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetSecuredFolders", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebFolder[] GetSecuredFolders(int siteItemId) {
            object[] results = this.Invoke("GetSecuredFolders", new object[] {
                        siteItemId});
            return ((WebFolder[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSecuredFolders(int siteItemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSecuredFolders", new object[] {
                        siteItemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebFolder[] EndGetSecuredFolders(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebFolder[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSecuredFoldersAsync(int siteItemId) {
            this.GetSecuredFoldersAsync(siteItemId, null);
        }
        
        /// <remarks/>
        public void GetSecuredFoldersAsync(int siteItemId, object userState) {
            if ((this.GetSecuredFoldersOperationCompleted == null)) {
                this.GetSecuredFoldersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSecuredFoldersOperationCompleted);
            }
            this.InvokeAsync("GetSecuredFolders", new object[] {
                        siteItemId}, this.GetSecuredFoldersOperationCompleted, userState);
        }
        
        private void OnGetSecuredFoldersOperationCompleted(object arg) {
            if ((this.GetSecuredFoldersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSecuredFoldersCompleted(this, new GetSecuredFoldersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetSecuredFolder", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebFolder GetSecuredFolder(int siteItemId, string folderPath) {
            object[] results = this.Invoke("GetSecuredFolder", new object[] {
                        siteItemId,
                        folderPath});
            return ((WebFolder)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSecuredFolder(int siteItemId, string folderPath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSecuredFolder", new object[] {
                        siteItemId,
                        folderPath}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebFolder EndGetSecuredFolder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebFolder)(results[0]));
        }
        
        /// <remarks/>
        public void GetSecuredFolderAsync(int siteItemId, string folderPath) {
            this.GetSecuredFolderAsync(siteItemId, folderPath, null);
        }
        
        /// <remarks/>
        public void GetSecuredFolderAsync(int siteItemId, string folderPath, object userState) {
            if ((this.GetSecuredFolderOperationCompleted == null)) {
                this.GetSecuredFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSecuredFolderOperationCompleted);
            }
            this.InvokeAsync("GetSecuredFolder", new object[] {
                        siteItemId,
                        folderPath}, this.GetSecuredFolderOperationCompleted, userState);
        }
        
        private void OnGetSecuredFolderOperationCompleted(object arg) {
            if ((this.GetSecuredFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSecuredFolderCompleted(this, new GetSecuredFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/UpdateSecuredFolder", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateSecuredFolder(int siteItemId, WebFolder folder) {
            object[] results = this.Invoke("UpdateSecuredFolder", new object[] {
                        siteItemId,
                        folder});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateSecuredFolder(int siteItemId, WebFolder folder, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateSecuredFolder", new object[] {
                        siteItemId,
                        folder}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUpdateSecuredFolder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSecuredFolderAsync(int siteItemId, WebFolder folder) {
            this.UpdateSecuredFolderAsync(siteItemId, folder, null);
        }
        
        /// <remarks/>
        public void UpdateSecuredFolderAsync(int siteItemId, WebFolder folder, object userState) {
            if ((this.UpdateSecuredFolderOperationCompleted == null)) {
                this.UpdateSecuredFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSecuredFolderOperationCompleted);
            }
            this.InvokeAsync("UpdateSecuredFolder", new object[] {
                        siteItemId,
                        folder}, this.UpdateSecuredFolderOperationCompleted, userState);
        }
        
        private void OnUpdateSecuredFolderOperationCompleted(object arg) {
            if ((this.UpdateSecuredFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSecuredFolderCompleted(this, new UpdateSecuredFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/DeleteSecuredFolder", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteSecuredFolder(int siteItemId, string folderPath) {
            object[] results = this.Invoke("DeleteSecuredFolder", new object[] {
                        siteItemId,
                        folderPath});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteSecuredFolder(int siteItemId, string folderPath, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteSecuredFolder", new object[] {
                        siteItemId,
                        folderPath}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDeleteSecuredFolder(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteSecuredFolderAsync(int siteItemId, string folderPath) {
            this.DeleteSecuredFolderAsync(siteItemId, folderPath, null);
        }
        
        /// <remarks/>
        public void DeleteSecuredFolderAsync(int siteItemId, string folderPath, object userState) {
            if ((this.DeleteSecuredFolderOperationCompleted == null)) {
                this.DeleteSecuredFolderOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSecuredFolderOperationCompleted);
            }
            this.InvokeAsync("DeleteSecuredFolder", new object[] {
                        siteItemId,
                        folderPath}, this.DeleteSecuredFolderOperationCompleted, userState);
        }
        
        private void OnDeleteSecuredFolderOperationCompleted(object arg) {
            if ((this.DeleteSecuredFolderCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSecuredFolderCompleted(this, new DeleteSecuredFolderCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetSecuredUsers", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebUser[] GetSecuredUsers(int siteItemId) {
            object[] results = this.Invoke("GetSecuredUsers", new object[] {
                        siteItemId});
            return ((WebUser[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSecuredUsers(int siteItemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSecuredUsers", new object[] {
                        siteItemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebUser[] EndGetSecuredUsers(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebUser[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSecuredUsersAsync(int siteItemId) {
            this.GetSecuredUsersAsync(siteItemId, null);
        }
        
        /// <remarks/>
        public void GetSecuredUsersAsync(int siteItemId, object userState) {
            if ((this.GetSecuredUsersOperationCompleted == null)) {
                this.GetSecuredUsersOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSecuredUsersOperationCompleted);
            }
            this.InvokeAsync("GetSecuredUsers", new object[] {
                        siteItemId}, this.GetSecuredUsersOperationCompleted, userState);
        }
        
        private void OnGetSecuredUsersOperationCompleted(object arg) {
            if ((this.GetSecuredUsersCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSecuredUsersCompleted(this, new GetSecuredUsersCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetSecuredUser", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebUser GetSecuredUser(int siteItemId, string userName) {
            object[] results = this.Invoke("GetSecuredUser", new object[] {
                        siteItemId,
                        userName});
            return ((WebUser)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSecuredUser(int siteItemId, string userName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSecuredUser", new object[] {
                        siteItemId,
                        userName}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebUser EndGetSecuredUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebUser)(results[0]));
        }
        
        /// <remarks/>
        public void GetSecuredUserAsync(int siteItemId, string userName) {
            this.GetSecuredUserAsync(siteItemId, userName, null);
        }
        
        /// <remarks/>
        public void GetSecuredUserAsync(int siteItemId, string userName, object userState) {
            if ((this.GetSecuredUserOperationCompleted == null)) {
                this.GetSecuredUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSecuredUserOperationCompleted);
            }
            this.InvokeAsync("GetSecuredUser", new object[] {
                        siteItemId,
                        userName}, this.GetSecuredUserOperationCompleted, userState);
        }
        
        private void OnGetSecuredUserOperationCompleted(object arg) {
            if ((this.GetSecuredUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSecuredUserCompleted(this, new GetSecuredUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/UpdateSecuredUser", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateSecuredUser(int siteItemId, WebUser user) {
            object[] results = this.Invoke("UpdateSecuredUser", new object[] {
                        siteItemId,
                        user});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateSecuredUser(int siteItemId, WebUser user, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateSecuredUser", new object[] {
                        siteItemId,
                        user}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUpdateSecuredUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSecuredUserAsync(int siteItemId, WebUser user) {
            this.UpdateSecuredUserAsync(siteItemId, user, null);
        }
        
        /// <remarks/>
        public void UpdateSecuredUserAsync(int siteItemId, WebUser user, object userState) {
            if ((this.UpdateSecuredUserOperationCompleted == null)) {
                this.UpdateSecuredUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSecuredUserOperationCompleted);
            }
            this.InvokeAsync("UpdateSecuredUser", new object[] {
                        siteItemId,
                        user}, this.UpdateSecuredUserOperationCompleted, userState);
        }
        
        private void OnUpdateSecuredUserOperationCompleted(object arg) {
            if ((this.UpdateSecuredUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSecuredUserCompleted(this, new UpdateSecuredUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/DeleteSecuredUser", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteSecuredUser(int siteItemId, string userName) {
            object[] results = this.Invoke("DeleteSecuredUser", new object[] {
                        siteItemId,
                        userName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteSecuredUser(int siteItemId, string userName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteSecuredUser", new object[] {
                        siteItemId,
                        userName}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDeleteSecuredUser(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteSecuredUserAsync(int siteItemId, string userName) {
            this.DeleteSecuredUserAsync(siteItemId, userName, null);
        }
        
        /// <remarks/>
        public void DeleteSecuredUserAsync(int siteItemId, string userName, object userState) {
            if ((this.DeleteSecuredUserOperationCompleted == null)) {
                this.DeleteSecuredUserOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSecuredUserOperationCompleted);
            }
            this.InvokeAsync("DeleteSecuredUser", new object[] {
                        siteItemId,
                        userName}, this.DeleteSecuredUserOperationCompleted, userState);
        }
        
        private void OnDeleteSecuredUserOperationCompleted(object arg) {
            if ((this.DeleteSecuredUserCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSecuredUserCompleted(this, new DeleteSecuredUserCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetSecuredGroups", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebGroup[] GetSecuredGroups(int siteItemId) {
            object[] results = this.Invoke("GetSecuredGroups", new object[] {
                        siteItemId});
            return ((WebGroup[])(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSecuredGroups(int siteItemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSecuredGroups", new object[] {
                        siteItemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebGroup[] EndGetSecuredGroups(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebGroup[])(results[0]));
        }
        
        /// <remarks/>
        public void GetSecuredGroupsAsync(int siteItemId) {
            this.GetSecuredGroupsAsync(siteItemId, null);
        }
        
        /// <remarks/>
        public void GetSecuredGroupsAsync(int siteItemId, object userState) {
            if ((this.GetSecuredGroupsOperationCompleted == null)) {
                this.GetSecuredGroupsOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSecuredGroupsOperationCompleted);
            }
            this.InvokeAsync("GetSecuredGroups", new object[] {
                        siteItemId}, this.GetSecuredGroupsOperationCompleted, userState);
        }
        
        private void OnGetSecuredGroupsOperationCompleted(object arg) {
            if ((this.GetSecuredGroupsCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSecuredGroupsCompleted(this, new GetSecuredGroupsCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetSecuredGroup", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public WebGroup GetSecuredGroup(int siteItemId, string groupName) {
            object[] results = this.Invoke("GetSecuredGroup", new object[] {
                        siteItemId,
                        groupName});
            return ((WebGroup)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGetSecuredGroup(int siteItemId, string groupName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GetSecuredGroup", new object[] {
                        siteItemId,
                        groupName}, callback, asyncState);
        }
        
        /// <remarks/>
        public WebGroup EndGetSecuredGroup(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((WebGroup)(results[0]));
        }
        
        /// <remarks/>
        public void GetSecuredGroupAsync(int siteItemId, string groupName) {
            this.GetSecuredGroupAsync(siteItemId, groupName, null);
        }
        
        /// <remarks/>
        public void GetSecuredGroupAsync(int siteItemId, string groupName, object userState) {
            if ((this.GetSecuredGroupOperationCompleted == null)) {
                this.GetSecuredGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSecuredGroupOperationCompleted);
            }
            this.InvokeAsync("GetSecuredGroup", new object[] {
                        siteItemId,
                        groupName}, this.GetSecuredGroupOperationCompleted, userState);
        }
        
        private void OnGetSecuredGroupOperationCompleted(object arg) {
            if ((this.GetSecuredGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSecuredGroupCompleted(this, new GetSecuredGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/UpdateSecuredGroup", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int UpdateSecuredGroup(int siteItemId, WebGroup group) {
            object[] results = this.Invoke("UpdateSecuredGroup", new object[] {
                        siteItemId,
                        group});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginUpdateSecuredGroup(int siteItemId, WebGroup group, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("UpdateSecuredGroup", new object[] {
                        siteItemId,
                        group}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndUpdateSecuredGroup(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void UpdateSecuredGroupAsync(int siteItemId, WebGroup group) {
            this.UpdateSecuredGroupAsync(siteItemId, group, null);
        }
        
        /// <remarks/>
        public void UpdateSecuredGroupAsync(int siteItemId, WebGroup group, object userState) {
            if ((this.UpdateSecuredGroupOperationCompleted == null)) {
                this.UpdateSecuredGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnUpdateSecuredGroupOperationCompleted);
            }
            this.InvokeAsync("UpdateSecuredGroup", new object[] {
                        siteItemId,
                        group}, this.UpdateSecuredGroupOperationCompleted, userState);
        }
        
        private void OnUpdateSecuredGroupOperationCompleted(object arg) {
            if ((this.UpdateSecuredGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.UpdateSecuredGroupCompleted(this, new UpdateSecuredGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/DeleteSecuredGroup", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int DeleteSecuredGroup(int siteItemId, string groupName) {
            object[] results = this.Invoke("DeleteSecuredGroup", new object[] {
                        siteItemId,
                        groupName});
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginDeleteSecuredGroup(int siteItemId, string groupName, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("DeleteSecuredGroup", new object[] {
                        siteItemId,
                        groupName}, callback, asyncState);
        }
        
        /// <remarks/>
        public int EndDeleteSecuredGroup(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }
        
        /// <remarks/>
        public void DeleteSecuredGroupAsync(int siteItemId, string groupName) {
            this.DeleteSecuredGroupAsync(siteItemId, groupName, null);
        }
        
        /// <remarks/>
        public void DeleteSecuredGroupAsync(int siteItemId, string groupName, object userState) {
            if ((this.DeleteSecuredGroupOperationCompleted == null)) {
                this.DeleteSecuredGroupOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteSecuredGroupOperationCompleted);
            }
            this.InvokeAsync("DeleteSecuredGroup", new object[] {
                        siteItemId,
                        groupName}, this.DeleteSecuredGroupOperationCompleted, userState);
        }
        
        private void OnDeleteSecuredGroupOperationCompleted(object arg) {
            if ((this.DeleteSecuredGroupCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteSecuredGroupCompleted(this, new DeleteSecuredGroupCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GrantWebManagementAccess", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject GrantWebManagementAccess(int siteItemId, string accountName, string accountPassword) {
            object[] results = this.Invoke("GrantWebManagementAccess", new object[] {
                        siteItemId,
                        accountName,
                        accountPassword});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginGrantWebManagementAccess(int siteItemId, string accountName, string accountPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("GrantWebManagementAccess", new object[] {
                        siteItemId,
                        accountName,
                        accountPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndGrantWebManagementAccess(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void GrantWebManagementAccessAsync(int siteItemId, string accountName, string accountPassword) {
            this.GrantWebManagementAccessAsync(siteItemId, accountName, accountPassword, null);
        }
        
        /// <remarks/>
        public void GrantWebManagementAccessAsync(int siteItemId, string accountName, string accountPassword, object userState) {
            if ((this.GrantWebManagementAccessOperationCompleted == null)) {
                this.GrantWebManagementAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGrantWebManagementAccessOperationCompleted);
            }
            this.InvokeAsync("GrantWebManagementAccess", new object[] {
                        siteItemId,
                        accountName,
                        accountPassword}, this.GrantWebManagementAccessOperationCompleted, userState);
        }
        
        private void OnGrantWebManagementAccessOperationCompleted(object arg) {
            if ((this.GrantWebManagementAccessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GrantWebManagementAccessCompleted(this, new GrantWebManagementAccessCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/RevokeWebManagementAccess", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public void RevokeWebManagementAccess(int siteItemId) {
            this.Invoke("RevokeWebManagementAccess", new object[] {
                        siteItemId});
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginRevokeWebManagementAccess(int siteItemId, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("RevokeWebManagementAccess", new object[] {
                        siteItemId}, callback, asyncState);
        }
        
        /// <remarks/>
        public void EndRevokeWebManagementAccess(System.IAsyncResult asyncResult) {
            this.EndInvoke(asyncResult);
        }
        
        /// <remarks/>
        public void RevokeWebManagementAccessAsync(int siteItemId) {
            this.RevokeWebManagementAccessAsync(siteItemId, null);
        }
        
        /// <remarks/>
        public void RevokeWebManagementAccessAsync(int siteItemId, object userState) {
            if ((this.RevokeWebManagementAccessOperationCompleted == null)) {
                this.RevokeWebManagementAccessOperationCompleted = new System.Threading.SendOrPostCallback(this.OnRevokeWebManagementAccessOperationCompleted);
            }
            this.InvokeAsync("RevokeWebManagementAccess", new object[] {
                        siteItemId}, this.RevokeWebManagementAccessOperationCompleted, userState);
        }
        
        private void OnRevokeWebManagementAccessOperationCompleted(object arg) {
            if ((this.RevokeWebManagementAccessCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.RevokeWebManagementAccessCompleted(this, new System.ComponentModel.AsyncCompletedEventArgs(invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/ChangeWebManagementAccessPassword", RequestNamespace="http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace="http://smbsaas/websitepanel/enterpriseserver", Use=System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle=System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject ChangeWebManagementAccessPassword(int siteItemId, string accountPassword) {
            object[] results = this.Invoke("ChangeWebManagementAccessPassword", new object[] {
                        siteItemId,
                        accountPassword});
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public System.IAsyncResult BeginChangeWebManagementAccessPassword(int siteItemId, string accountPassword, System.AsyncCallback callback, object asyncState) {
            return this.BeginInvoke("ChangeWebManagementAccessPassword", new object[] {
                        siteItemId,
                        accountPassword}, callback, asyncState);
        }
        
        /// <remarks/>
        public ResultObject EndChangeWebManagementAccessPassword(System.IAsyncResult asyncResult) {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }
        
        /// <remarks/>
        public void ChangeWebManagementAccessPasswordAsync(int siteItemId, string accountPassword) {
            this.ChangeWebManagementAccessPasswordAsync(siteItemId, accountPassword, null);
        }
        
        /// <remarks/>
        public void ChangeWebManagementAccessPasswordAsync(int siteItemId, string accountPassword, object userState) {
            if ((this.ChangeWebManagementAccessPasswordOperationCompleted == null)) {
                this.ChangeWebManagementAccessPasswordOperationCompleted = new System.Threading.SendOrPostCallback(this.OnChangeWebManagementAccessPasswordOperationCompleted);
            }
            this.InvokeAsync("ChangeWebManagementAccessPassword", new object[] {
                        siteItemId,
                        accountPassword}, this.ChangeWebManagementAccessPasswordOperationCompleted, userState);
        }
        
        private void OnChangeWebManagementAccessPasswordOperationCompleted(object arg) {
            if ((this.ChangeWebManagementAccessPasswordCompleted != null)) {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ChangeWebManagementAccessPasswordCompleted(this, new ChangeWebManagementAccessPasswordCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/CertificateRequest", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSLCertificate CertificateRequest(SSLCertificate certificate, int siteItemId)
        {
            object[] results = this.Invoke("CertificateRequest", new object[] {
                        certificate,
                        siteItemId});
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCertificateRequest(SSLCertificate certificate, int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CertificateRequest", new object[] {
                        certificate,
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public SSLCertificate EndCertificateRequest(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public void CertificateRequestAsync(SSLCertificate certificate, int siteItemId)
        {
            this.CertificateRequestAsync(certificate, siteItemId, null);
        }

        /// <remarks/>
        public void CertificateRequestAsync(SSLCertificate certificate, int siteItemId, object userState)
        {
            if ((this.CertificateRequestOperationCompleted == null))
            {
                this.CertificateRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCertificateRequestOperationCompleted);
            }
            this.InvokeAsync("CertificateRequest", new object[] {
                        certificate,
                        siteItemId}, this.CertificateRequestOperationCompleted, userState);
        }

        private void OnCertificateRequestOperationCompleted(object arg)
        {
            if ((this.CertificateRequestCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CertificateRequestCompleted(this, new CertificateRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/InstallCertificate", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject InstallCertificate(SSLCertificate certificate, int siteItemId)
        {
            object[] results = this.Invoke("InstallCertificate", new object[] {
                        certificate,
                        siteItemId});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInstallCertificate(SSLCertificate certificate, int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InstallCertificate", new object[] {
                        certificate,
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndInstallCertificate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void InstallCertificateAsync(SSLCertificate certificate, int siteItemId)
        {
            this.InstallCertificateAsync(certificate, siteItemId, null);
        }

        /// <remarks/>
        public void InstallCertificateAsync(SSLCertificate certificate, int siteItemId, object userState)
        {
            if ((this.InstallCertificateOperationCompleted == null))
            {
                this.InstallCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallCertificateOperationCompleted);
            }
            this.InvokeAsync("InstallCertificate", new object[] {
                        certificate,
                        siteItemId}, this.InstallCertificateOperationCompleted, userState);
        }

        private void OnInstallCertificateOperationCompleted(object arg)
        {
            if ((this.InstallCertificateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallCertificateCompleted(this, new InstallCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/InstallPfx", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject InstallPfx([System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")] byte[] certificate, int siteItemId, string password)
        {
            object[] results = this.Invoke("InstallPfx", new object[] {
                        certificate,
                        siteItemId,
                        password});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginInstallPfx(byte[] certificate, int siteItemId, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("InstallPfx", new object[] {
                        certificate,
                        siteItemId,
                        password}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndInstallPfx(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void InstallPfxAsync(byte[] certificate, int siteItemId, string password)
        {
            this.InstallPfxAsync(certificate, siteItemId, password, null);
        }

        /// <remarks/>
        public void InstallPfxAsync(byte[] certificate, int siteItemId, string password, object userState)
        {
            if ((this.InstallPfxOperationCompleted == null))
            {
                this.InstallPfxOperationCompleted = new System.Threading.SendOrPostCallback(this.OnInstallPfxOperationCompleted);
            }
            this.InvokeAsync("InstallPfx", new object[] {
                        certificate,
                        siteItemId,
                        password}, this.InstallPfxOperationCompleted, userState);
        }

        private void OnInstallPfxOperationCompleted(object arg)
        {
            if ((this.InstallPfxCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.InstallPfxCompleted(this, new InstallPfxCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetPendingCertificates", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSLCertificate[] GetPendingCertificates(int siteItemId)
        {
            object[] results = this.Invoke("GetPendingCertificates", new object[] {
                        siteItemId});
            return ((SSLCertificate[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetPendingCertificates(int siteItemId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetPendingCertificates", new object[] {
                        siteItemId}, callback, asyncState);
        }

        /// <remarks/>
        public SSLCertificate[] EndGetPendingCertificates(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSLCertificate[])(results[0]));
        }

        /// <remarks/>
        public void GetPendingCertificatesAsync(int siteItemId)
        {
            this.GetPendingCertificatesAsync(siteItemId, null);
        }

        /// <remarks/>
        public void GetPendingCertificatesAsync(int siteItemId, object userState)
        {
            if ((this.GetPendingCertificatesOperationCompleted == null))
            {
                this.GetPendingCertificatesOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetPendingCertificatesOperationCompleted);
            }
            this.InvokeAsync("GetPendingCertificates", new object[] {
                        siteItemId}, this.GetPendingCertificatesOperationCompleted, userState);
        }

        private void OnGetPendingCertificatesOperationCompleted(object arg)
        {
            if ((this.GetPendingCertificatesCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetPendingCertificatesCompleted(this, new GetPendingCertificatesCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetSSLCertificateByID", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSLCertificate GetSSLCertificateByID(int Id)
        {
            object[] results = this.Invoke("GetSSLCertificateByID", new object[] {
                        Id});
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSSLCertificateByID(int Id, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSSLCertificateByID", new object[] {
                        Id}, callback, asyncState);
        }

        /// <remarks/>
        public SSLCertificate EndGetSSLCertificateByID(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public void GetSSLCertificateByIDAsync(int Id)
        {
            this.GetSSLCertificateByIDAsync(Id, null);
        }

        /// <remarks/>
        public void GetSSLCertificateByIDAsync(int Id, object userState)
        {
            if ((this.GetSSLCertificateByIDOperationCompleted == null))
            {
                this.GetSSLCertificateByIDOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSSLCertificateByIDOperationCompleted);
            }
            this.InvokeAsync("GetSSLCertificateByID", new object[] {
                        Id}, this.GetSSLCertificateByIDOperationCompleted, userState);
        }

        private void OnGetSSLCertificateByIDOperationCompleted(object arg)
        {
            if ((this.GetSSLCertificateByIDCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSSLCertificateByIDCompleted(this, new GetSSLCertificateByIDCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetSiteCert", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSLCertificate GetSiteCert(int siteID)
        {
            object[] results = this.Invoke("GetSiteCert", new object[] {
                        siteID});
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetSiteCert(int siteID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetSiteCert", new object[] {
                        siteID}, callback, asyncState);
        }

        /// <remarks/>
        public SSLCertificate EndGetSiteCert(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSLCertificate)(results[0]));
        }

        /// <remarks/>
        public void GetSiteCertAsync(int siteID)
        {
            this.GetSiteCertAsync(siteID, null);
        }

        /// <remarks/>
        public void GetSiteCertAsync(int siteID, object userState)
        {
            if ((this.GetSiteCertOperationCompleted == null))
            {
                this.GetSiteCertOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetSiteCertOperationCompleted);
            }
            this.InvokeAsync("GetSiteCert", new object[] {
                        siteID}, this.GetSiteCertOperationCompleted, userState);
        }

        private void OnGetSiteCertOperationCompleted(object arg)
        {
            if ((this.GetSiteCertCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetSiteCertCompleted(this, new GetSiteCertCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/CheckSSLForWebsite", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public int CheckSSLForWebsite(int siteID, bool renewal)
        {
            object[] results = this.Invoke("CheckSSLForWebsite", new object[] {
                        siteID,
                        renewal});
            return ((int)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckSSLForWebsite(int siteID, bool renewal, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CheckSSLForWebsite", new object[] {
                        siteID,
                        renewal}, callback, asyncState);
        }

        /// <remarks/>
        public int EndCheckSSLForWebsite(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((int)(results[0]));
        }

        /// <remarks/>
        public void CheckSSLForWebsiteAsync(int siteID, bool renewal)
        {
            this.CheckSSLForWebsiteAsync(siteID, renewal, null);
        }

        /// <remarks/>
        public void CheckSSLForWebsiteAsync(int siteID, bool renewal, object userState)
        {
            if ((this.CheckSSLForWebsiteOperationCompleted == null))
            {
                this.CheckSSLForWebsiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSSLForWebsiteOperationCompleted);
            }
            this.InvokeAsync("CheckSSLForWebsite", new object[] {
                        siteID,
                        renewal}, this.CheckSSLForWebsiteOperationCompleted, userState);
        }

        private void OnCheckSSLForWebsiteOperationCompleted(object arg)
        {
            if ((this.CheckSSLForWebsiteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSSLForWebsiteCompleted(this, new CheckSSLForWebsiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/CheckSSLForDomain", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject CheckSSLForDomain(string domain, int siteID)
        {
            object[] results = this.Invoke("CheckSSLForDomain", new object[] {
                        domain,
                        siteID});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckSSLForDomain(string domain, int siteID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CheckSSLForDomain", new object[] {
                        domain,
                        siteID}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndCheckSSLForDomain(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void CheckSSLForDomainAsync(string domain, int siteID)
        {
            this.CheckSSLForDomainAsync(domain, siteID, null);
        }

        /// <remarks/>
        public void CheckSSLForDomainAsync(string domain, int siteID, object userState)
        {
            if ((this.CheckSSLForDomainOperationCompleted == null))
            {
                this.CheckSSLForDomainOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckSSLForDomainOperationCompleted);
            }
            this.InvokeAsync("CheckSSLForDomain", new object[] {
                        domain,
                        siteID}, this.CheckSSLForDomainOperationCompleted, userState);
        }

        private void OnCheckSSLForDomainOperationCompleted(object arg)
        {
            if ((this.CheckSSLForDomainCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckSSLForDomainCompleted(this, new CheckSSLForDomainCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/ExportCertificate", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        [return: System.Xml.Serialization.XmlElementAttribute(DataType = "base64Binary")]
        public byte[] ExportCertificate(int siteId, string serialNumber, string password)
        {
            object[] results = this.Invoke("ExportCertificate", new object[] {
                        siteId,
                        serialNumber,
                        password});
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginExportCertificate(int siteId, string serialNumber, string password, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ExportCertificate", new object[] {
                        siteId,
                        serialNumber,
                        password}, callback, asyncState);
        }

        /// <remarks/>
        public byte[] EndExportCertificate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((byte[])(results[0]));
        }

        /// <remarks/>
        public void ExportCertificateAsync(int siteId, string serialNumber, string password)
        {
            this.ExportCertificateAsync(siteId, serialNumber, password, null);
        }

        /// <remarks/>
        public void ExportCertificateAsync(int siteId, string serialNumber, string password, object userState)
        {
            if ((this.ExportCertificateOperationCompleted == null))
            {
                this.ExportCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnExportCertificateOperationCompleted);
            }
            this.InvokeAsync("ExportCertificate", new object[] {
                        siteId,
                        serialNumber,
                        password}, this.ExportCertificateOperationCompleted, userState);
        }

        private void OnExportCertificateOperationCompleted(object arg)
        {
            if ((this.ExportCertificateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ExportCertificateCompleted(this, new ExportCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/GetCertificatesForSite", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public SSLCertificate[] GetCertificatesForSite(int siteId)
        {
            object[] results = this.Invoke("GetCertificatesForSite", new object[] {
                        siteId});
            return ((SSLCertificate[])(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginGetCertificatesForSite(int siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("GetCertificatesForSite", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public SSLCertificate[] EndGetCertificatesForSite(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((SSLCertificate[])(results[0]));
        }

        /// <remarks/>
        public void GetCertificatesForSiteAsync(int siteId)
        {
            this.GetCertificatesForSiteAsync(siteId, null);
        }

        /// <remarks/>
        public void GetCertificatesForSiteAsync(int siteId, object userState)
        {
            if ((this.GetCertificatesForSiteOperationCompleted == null))
            {
                this.GetCertificatesForSiteOperationCompleted = new System.Threading.SendOrPostCallback(this.OnGetCertificatesForSiteOperationCompleted);
            }
            this.InvokeAsync("GetCertificatesForSite", new object[] {
                        siteId}, this.GetCertificatesForSiteOperationCompleted, userState);
        }

        private void OnGetCertificatesForSiteOperationCompleted(object arg)
        {
            if ((this.GetCertificatesForSiteCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.GetCertificatesForSiteCompleted(this, new GetCertificatesForSiteCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/DeleteCertificate", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject DeleteCertificate(int siteId, SSLCertificate certificate)
        {
            object[] results = this.Invoke("DeleteCertificate", new object[] {
                        siteId,
                        certificate});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteCertificate(int siteId, SSLCertificate certificate, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteCertificate", new object[] {
                        siteId,
                        certificate}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndDeleteCertificate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void DeleteCertificateAsync(int siteId, SSLCertificate certificate)
        {
            this.DeleteCertificateAsync(siteId, certificate, null);
        }

        /// <remarks/>
        public void DeleteCertificateAsync(int siteId, SSLCertificate certificate, object userState)
        {
            if ((this.DeleteCertificateOperationCompleted == null))
            {
                this.DeleteCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCertificateOperationCompleted);
            }
            this.InvokeAsync("DeleteCertificate", new object[] {
                        siteId,
                        certificate}, this.DeleteCertificateOperationCompleted, userState);
        }

        private void OnDeleteCertificateOperationCompleted(object arg)
        {
            if ((this.DeleteCertificateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCertificateCompleted(this, new DeleteCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/ImportCertificate", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject ImportCertificate(int siteId)
        {
            object[] results = this.Invoke("ImportCertificate", new object[] {
                        siteId});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginImportCertificate(int siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("ImportCertificate", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndImportCertificate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void ImportCertificateAsync(int siteId)
        {
            this.ImportCertificateAsync(siteId, null);
        }

        /// <remarks/>
        public void ImportCertificateAsync(int siteId, object userState)
        {
            if ((this.ImportCertificateOperationCompleted == null))
            {
                this.ImportCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnImportCertificateOperationCompleted);
            }
            this.InvokeAsync("ImportCertificate", new object[] {
                        siteId}, this.ImportCertificateOperationCompleted, userState);
        }

        private void OnImportCertificateOperationCompleted(object arg)
        {
            if ((this.ImportCertificateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.ImportCertificateCompleted(this, new ImportCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/CheckCertificate", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject CheckCertificate(int siteId)
        {
            object[] results = this.Invoke("CheckCertificate", new object[] {
                        siteId});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginCheckCertificate(int siteId, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("CheckCertificate", new object[] {
                        siteId}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndCheckCertificate(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void CheckCertificateAsync(int siteId)
        {
            this.CheckCertificateAsync(siteId, null);
        }

        /// <remarks/>
        public void CheckCertificateAsync(int siteId, object userState)
        {
            if ((this.CheckCertificateOperationCompleted == null))
            {
                this.CheckCertificateOperationCompleted = new System.Threading.SendOrPostCallback(this.OnCheckCertificateOperationCompleted);
            }
            this.InvokeAsync("CheckCertificate", new object[] {
                        siteId}, this.CheckCertificateOperationCompleted, userState);
        }

        private void OnCheckCertificateOperationCompleted(object arg)
        {
            if ((this.CheckCertificateCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.CheckCertificateCompleted(this, new CheckCertificateCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }

        /// <remarks/>
        [System.Web.Services.Protocols.SoapDocumentMethodAttribute("http://smbsaas/websitepanel/enterpriseserver/DeleteCertificateRequest", RequestNamespace = "http://smbsaas/websitepanel/enterpriseserver", ResponseNamespace = "http://smbsaas/websitepanel/enterpriseserver", Use = System.Web.Services.Description.SoapBindingUse.Literal, ParameterStyle = System.Web.Services.Protocols.SoapParameterStyle.Wrapped)]
        public ResultObject DeleteCertificateRequest(int siteId, int csrID)
        {
            object[] results = this.Invoke("DeleteCertificateRequest", new object[] {
                        siteId,
                        csrID});
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public System.IAsyncResult BeginDeleteCertificateRequest(int siteId, int csrID, System.AsyncCallback callback, object asyncState)
        {
            return this.BeginInvoke("DeleteCertificateRequest", new object[] {
                        siteId,
                        csrID}, callback, asyncState);
        }

        /// <remarks/>
        public ResultObject EndDeleteCertificateRequest(System.IAsyncResult asyncResult)
        {
            object[] results = this.EndInvoke(asyncResult);
            return ((ResultObject)(results[0]));
        }

        /// <remarks/>
        public void DeleteCertificateRequestAsync(int siteId, int csrID)
        {
            this.DeleteCertificateRequestAsync(siteId, csrID, null);
        }

        /// <remarks/>
        public void DeleteCertificateRequestAsync(int siteId, int csrID, object userState)
        {
            if ((this.DeleteCertificateRequestOperationCompleted == null))
            {
                this.DeleteCertificateRequestOperationCompleted = new System.Threading.SendOrPostCallback(this.OnDeleteCertificateRequestOperationCompleted);
            }
            this.InvokeAsync("DeleteCertificateRequest", new object[] {
                        siteId,
                        csrID}, this.DeleteCertificateRequestOperationCompleted, userState);
        }

        private void OnDeleteCertificateRequestOperationCompleted(object arg)
        {
            if ((this.DeleteCertificateRequestCompleted != null))
            {
                System.Web.Services.Protocols.InvokeCompletedEventArgs invokeArgs = ((System.Web.Services.Protocols.InvokeCompletedEventArgs)(arg));
                this.DeleteCertificateRequestCompleted(this, new DeleteCertificateRequestCompletedEventArgs(invokeArgs.Results, invokeArgs.Error, invokeArgs.Cancelled, invokeArgs.UserState));
            }
        }
        
        /// <remarks/>
        public new void CancelAsync(object userState) {
            base.CancelAsync(userState);
        }
    }
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRawWebSitesPagedCompletedEventHandler(object sender, GetRawWebSitesPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRawWebSitesPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRawWebSitesPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetWebSitesCompletedEventHandler(object sender, GetWebSitesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebSitesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebSitesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WebSite[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WebSite[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetWebSiteCompletedEventHandler(object sender, GetWebSiteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WebSite Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WebSite)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetVirtualDirectoriesCompletedEventHandler(object sender, GetVirtualDirectoriesCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVirtualDirectoriesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVirtualDirectoriesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WebVirtualDirectory[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WebVirtualDirectory[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetVirtualDirectoryCompletedEventHandler(object sender, GetVirtualDirectoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetVirtualDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetVirtualDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WebVirtualDirectory Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WebVirtualDirectory)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetWebSitePointersCompletedEventHandler(object sender, GetWebSitePointersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetWebSitePointersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetWebSitePointersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public DomainInfo[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((DomainInfo[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddWebSitePointerCompletedEventHandler(object sender, AddWebSitePointerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddWebSitePointerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddWebSitePointerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteWebSitePointerCompletedEventHandler(object sender, DeleteWebSitePointerCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteWebSitePointerCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteWebSitePointerCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddWebSiteCompletedEventHandler(object sender, AddWebSiteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddWebSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddWebSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddVirtualDirectoryCompletedEventHandler(object sender, AddVirtualDirectoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddVirtualDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddVirtualDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateWebSiteCompletedEventHandler(object sender, UpdateWebSiteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateWebSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateWebSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void InstallFrontPageCompletedEventHandler(object sender, InstallFrontPageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstallFrontPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InstallFrontPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UninstallFrontPageCompletedEventHandler(object sender, UninstallFrontPageCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UninstallFrontPageCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UninstallFrontPageCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ChangeFrontPagePasswordCompletedEventHandler(object sender, ChangeFrontPagePasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeFrontPagePasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeFrontPagePasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RepairWebSiteCompletedEventHandler(object sender, RepairWebSiteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class RepairWebSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal RepairWebSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateVirtualDirectoryCompletedEventHandler(object sender, UpdateVirtualDirectoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateVirtualDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateVirtualDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteWebSiteCompletedEventHandler(object sender, DeleteWebSiteCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteWebSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteWebSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteVirtualDirectoryCompletedEventHandler(object sender, DeleteVirtualDirectoryCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteVirtualDirectoryCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteVirtualDirectoryCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ChangeSiteStateCompletedEventHandler(object sender, ChangeSiteStateCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeSiteStateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeSiteStateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSharedSSLDomainsCompletedEventHandler(object sender, GetSharedSSLDomainsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSharedSSLDomainsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSharedSSLDomainsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public string[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((string[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetRawSSLFoldersPagedCompletedEventHandler(object sender, GetRawSSLFoldersPagedCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetRawSSLFoldersPagedCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetRawSSLFoldersPagedCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public System.Data.DataSet Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((System.Data.DataSet)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSharedSSLFoldersCompletedEventHandler(object sender, GetSharedSSLFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSharedSSLFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSharedSSLFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SharedSSLFolder[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SharedSSLFolder[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSharedSSLFolderCompletedEventHandler(object sender, GetSharedSSLFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSharedSSLFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSharedSSLFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public SharedSSLFolder Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((SharedSSLFolder)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void AddSharedSSLFolderCompletedEventHandler(object sender, AddSharedSSLFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class AddSharedSSLFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal AddSharedSSLFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateSharedSSLFolderCompletedEventHandler(object sender, UpdateSharedSSLFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSharedSSLFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSharedSSLFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteSharedSSLFolderCompletedEventHandler(object sender, DeleteSharedSSLFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteSharedSSLFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteSharedSSLFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void InstallSecuredFoldersCompletedEventHandler(object sender, InstallSecuredFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstallSecuredFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal InstallSecuredFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UninstallSecuredFoldersCompletedEventHandler(object sender, UninstallSecuredFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UninstallSecuredFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UninstallSecuredFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSecuredFoldersCompletedEventHandler(object sender, GetSecuredFoldersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSecuredFoldersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSecuredFoldersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WebFolder[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WebFolder[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSecuredFolderCompletedEventHandler(object sender, GetSecuredFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSecuredFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSecuredFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WebFolder Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WebFolder)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateSecuredFolderCompletedEventHandler(object sender, UpdateSecuredFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSecuredFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSecuredFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteSecuredFolderCompletedEventHandler(object sender, DeleteSecuredFolderCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteSecuredFolderCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteSecuredFolderCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSecuredUsersCompletedEventHandler(object sender, GetSecuredUsersCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSecuredUsersCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSecuredUsersCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WebUser[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WebUser[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSecuredUserCompletedEventHandler(object sender, GetSecuredUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSecuredUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSecuredUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WebUser Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WebUser)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateSecuredUserCompletedEventHandler(object sender, UpdateSecuredUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSecuredUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSecuredUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteSecuredUserCompletedEventHandler(object sender, DeleteSecuredUserCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteSecuredUserCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteSecuredUserCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSecuredGroupsCompletedEventHandler(object sender, GetSecuredGroupsCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSecuredGroupsCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSecuredGroupsCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WebGroup[] Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WebGroup[])(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSecuredGroupCompletedEventHandler(object sender, GetSecuredGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSecuredGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GetSecuredGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public WebGroup Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((WebGroup)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void UpdateSecuredGroupCompletedEventHandler(object sender, UpdateSecuredGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class UpdateSecuredGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal UpdateSecuredGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteSecuredGroupCompletedEventHandler(object sender, DeleteSecuredGroupCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteSecuredGroupCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal DeleteSecuredGroupCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public int Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GrantWebManagementAccessCompletedEventHandler(object sender, GrantWebManagementAccessCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GrantWebManagementAccessCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal GrantWebManagementAccessCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void RevokeWebManagementAccessCompletedEventHandler(object sender, System.ComponentModel.AsyncCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ChangeWebManagementAccessPasswordCompletedEventHandler(object sender, ChangeWebManagementAccessPasswordCompletedEventArgs e);
    
    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ChangeWebManagementAccessPasswordCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs {
        
        private object[] results;
        
        internal ChangeWebManagementAccessPasswordCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) : 
                base(exception, cancelled, userState) {
            this.results = results;
        }
        
        /// <remarks/>
        public ResultObject Result {
            get {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CertificateRequestCompletedEventHandler(object sender, CertificateRequestCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CertificateRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CertificateRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSLCertificate Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSLCertificate)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void InstallCertificateCompletedEventHandler(object sender, InstallCertificateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstallCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InstallCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void InstallPfxCompletedEventHandler(object sender, InstallPfxCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class InstallPfxCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal InstallPfxCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetPendingCertificatesCompletedEventHandler(object sender, GetPendingCertificatesCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetPendingCertificatesCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetPendingCertificatesCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSLCertificate[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSLCertificate[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSSLCertificateByIDCompletedEventHandler(object sender, GetSSLCertificateByIDCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSSLCertificateByIDCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSSLCertificateByIDCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSLCertificate Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSLCertificate)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetSiteCertCompletedEventHandler(object sender, GetSiteCertCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetSiteCertCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetSiteCertCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSLCertificate Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSLCertificate)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckSSLForWebsiteCompletedEventHandler(object sender, CheckSSLForWebsiteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSSLForWebsiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckSSLForWebsiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public int Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((int)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckSSLForDomainCompletedEventHandler(object sender, CheckSSLForDomainCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckSSLForDomainCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckSSLForDomainCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ExportCertificateCompletedEventHandler(object sender, ExportCertificateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ExportCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ExportCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public byte[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((byte[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void GetCertificatesForSiteCompletedEventHandler(object sender, GetCertificatesForSiteCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class GetCertificatesForSiteCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal GetCertificatesForSiteCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public SSLCertificate[] Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((SSLCertificate[])(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteCertificateCompletedEventHandler(object sender, DeleteCertificateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void ImportCertificateCompletedEventHandler(object sender, ImportCertificateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class ImportCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal ImportCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void CheckCertificateCompletedEventHandler(object sender, CheckCertificateCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class CheckCertificateCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal CheckCertificateCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    public delegate void DeleteCertificateRequestCompletedEventHandler(object sender, DeleteCertificateRequestCompletedEventArgs e);

    /// <remarks/>
    [System.CodeDom.Compiler.GeneratedCodeAttribute("wsdl", "2.0.50727.3038")]
    [System.Diagnostics.DebuggerStepThroughAttribute()]
    [System.ComponentModel.DesignerCategoryAttribute("code")]
    public partial class DeleteCertificateRequestCompletedEventArgs : System.ComponentModel.AsyncCompletedEventArgs
    {

        private object[] results;

        internal DeleteCertificateRequestCompletedEventArgs(object[] results, System.Exception exception, bool cancelled, object userState) :
            base(exception, cancelled, userState)
        {
            this.results = results;
        }

        /// <remarks/>
        public ResultObject Result
        {
            get
            {
                this.RaiseExceptionIfNecessary();
                return ((ResultObject)(this.results[0]));
            }
        }
    }
}
